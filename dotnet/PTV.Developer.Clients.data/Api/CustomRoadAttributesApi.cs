/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using PTV.Developer.Clients.data.Client;
using PTV.Developer.Clients.data.Model;

namespace PTV.Developer.Clients.data.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomRoadAttributesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenario</returns>
        CustomRoadAttributeScenario CreateCustomRoadAttributeScenario(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenario</returns>
        ApiResponse<CustomRoadAttributeScenario> CreateCustomRoadAttributeScenarioWithHttpInfo(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCustomRoadAttributeScenario(Guid? scenarioId, int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomRoadAttributeScenarioWithHttpInfo(Guid? scenarioId, int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all custom road attribute scenarios of the current user.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenarioList</returns>
        CustomRoadAttributeScenarioList GetAllCustomRoadAttributeScenarios(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all custom road attribute scenarios of the current user.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenarioList</returns>
        ApiResponse<CustomRoadAttributeScenarioList> GetAllCustomRoadAttributeScenariosWithHttpInfo(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a custom road attribute scenario by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenario</returns>
        CustomRoadAttributeScenario GetCustomRoadAttributeScenario(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a custom road attribute scenario by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenario</returns>
        ApiResponse<CustomRoadAttributeScenario> GetCustomRoadAttributeScenarioWithHttpInfo(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get roads from (click) points on a map.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoadsResponse</returns>
        RoadsResponse GetRoads(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get roads from (click) points on a map.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoadsResponse</returns>
        ApiResponse<RoadsResponse> GetRoadsWithHttpInfo(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Perform a full update of an existing custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenario</returns>
        CustomRoadAttributeScenario UpdateCustomRoadAttributeScenario(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Perform a full update of an existing custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenario</returns>
        ApiResponse<CustomRoadAttributeScenario> UpdateCustomRoadAttributeScenarioWithHttpInfo(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomRoadAttributesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenario</returns>
        System.Threading.Tasks.Task<CustomRoadAttributeScenario> CreateCustomRoadAttributeScenarioAsync(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Create a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenario)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRoadAttributeScenario>> CreateCustomRoadAttributeScenarioWithHttpInfoAsync(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomRoadAttributeScenarioAsync(Guid? scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Delete a custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomRoadAttributeScenarioWithHttpInfoAsync(Guid? scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all custom road attribute scenarios of the current user.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenarioList</returns>
        System.Threading.Tasks.Task<CustomRoadAttributeScenarioList> GetAllCustomRoadAttributeScenariosAsync(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of all custom road attribute scenarios of the current user.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenarioList)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRoadAttributeScenarioList>> GetAllCustomRoadAttributeScenariosWithHttpInfoAsync(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a custom road attribute scenario by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenario</returns>
        System.Threading.Tasks.Task<CustomRoadAttributeScenario> GetCustomRoadAttributeScenarioAsync(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a custom road attribute scenario by its ID.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenario)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRoadAttributeScenario>> GetCustomRoadAttributeScenarioWithHttpInfoAsync(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get roads from (click) points on a map.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoadsResponse</returns>
        System.Threading.Tasks.Task<RoadsResponse> GetRoadsAsync(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get roads from (click) points on a map.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoadsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<RoadsResponse>> GetRoadsWithHttpInfoAsync(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Perform a full update of an existing custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenario</returns>
        System.Threading.Tasks.Task<CustomRoadAttributeScenario> UpdateCustomRoadAttributeScenarioAsync(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Perform a full update of an existing custom road attribute scenario.
        /// </remarks>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenario)</returns>
        System.Threading.Tasks.Task<ApiResponse<CustomRoadAttributeScenario>> UpdateCustomRoadAttributeScenarioWithHttpInfoAsync(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICustomRoadAttributesApi : ICustomRoadAttributesApiSync, ICustomRoadAttributesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CustomRoadAttributesApi : ICustomRoadAttributesApi
    {
        private PTV.Developer.Clients.data.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRoadAttributesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomRoadAttributesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRoadAttributesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CustomRoadAttributesApi(string basePath)
        {
            this.Configuration = PTV.Developer.Clients.data.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.data.Client.GlobalConfiguration.Instance,
                new PTV.Developer.Clients.data.Client.Configuration { BasePath = basePath }
            );
            this.Client = new PTV.Developer.Clients.data.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.data.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = PTV.Developer.Clients.data.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRoadAttributesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CustomRoadAttributesApi(PTV.Developer.Clients.data.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PTV.Developer.Clients.data.Client.Configuration.MergeConfigurations(
                PTV.Developer.Clients.data.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new PTV.Developer.Clients.data.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new PTV.Developer.Clients.data.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = PTV.Developer.Clients.data.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRoadAttributesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CustomRoadAttributesApi(PTV.Developer.Clients.data.Client.ISynchronousClient client, PTV.Developer.Clients.data.Client.IAsynchronousClient asyncClient, PTV.Developer.Clients.data.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PTV.Developer.Clients.data.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PTV.Developer.Clients.data.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PTV.Developer.Clients.data.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PTV.Developer.Clients.data.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PTV.Developer.Clients.data.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Create a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenario</returns>
        public CustomRoadAttributeScenario CreateCustomRoadAttributeScenario(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0)
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> localVarResponse = CreateCustomRoadAttributeScenarioWithHttpInfo(customRoadAttributeScenario, results, polylineFormat, polylineMapType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenario</returns>
        public PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> CreateCustomRoadAttributeScenarioWithHttpInfo(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0)
        {
            // verify the required parameter 'customRoadAttributeScenario' is set
            if (customRoadAttributeScenario == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'customRoadAttributeScenario' when calling CustomRoadAttributesApi->CreateCustomRoadAttributeScenario");
            }

            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }
            if (polylineMapType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineMapType", polylineMapType));
            }
            localVarRequestOptions.Data = customRoadAttributeScenario;

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.CreateCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CustomRoadAttributeScenario>("/road-attributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Create a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenario</returns>
        public async System.Threading.Tasks.Task<CustomRoadAttributeScenario> CreateCustomRoadAttributeScenarioAsync(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> localVarResponse = await CreateCustomRoadAttributeScenarioWithHttpInfoAsync(customRoadAttributeScenario, results, polylineFormat, polylineMapType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Create a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customRoadAttributeScenario">The roads to be attributed.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenario)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario>> CreateCustomRoadAttributeScenarioWithHttpInfoAsync(CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'customRoadAttributeScenario' is set
            if (customRoadAttributeScenario == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'customRoadAttributeScenario' when calling CustomRoadAttributesApi->CreateCustomRoadAttributeScenario");
            }


            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }
            if (polylineMapType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineMapType", polylineMapType));
            }
            localVarRequestOptions.Data = customRoadAttributeScenario;

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.CreateCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CustomRoadAttributeScenario>("/road-attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCustomRoadAttributeScenario(Guid? scenarioId, int operationIndex = 0)
        {
            DeleteCustomRoadAttributeScenarioWithHttpInfo(scenarioId);
        }

        /// <summary>
        ///  Delete a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public PTV.Developer.Clients.data.Client.ApiResponse<Object> DeleteCustomRoadAttributeScenarioWithHttpInfo(Guid? scenarioId, int operationIndex = 0)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling CustomRoadAttributesApi->DeleteCustomRoadAttributeScenario");
            }

            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", PTV.Developer.Clients.data.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.DeleteCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/road-attributes/{scenarioId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Delete a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomRoadAttributeScenarioAsync(Guid? scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            await DeleteCustomRoadAttributeScenarioWithHttpInfoAsync(scenarioId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        ///  Delete a custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.data.Client.ApiResponse<Object>> DeleteCustomRoadAttributeScenarioWithHttpInfoAsync(Guid? scenarioId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling CustomRoadAttributesApi->DeleteCustomRoadAttributeScenario");
            }


            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", PTV.Developer.Clients.data.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.DeleteCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/road-attributes/{scenarioId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of all custom road attribute scenarios of the current user.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenarioList</returns>
        public CustomRoadAttributeScenarioList GetAllCustomRoadAttributeScenarios(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0)
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenarioList> localVarResponse = GetAllCustomRoadAttributeScenariosWithHttpInfo(results, polylineFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of all custom road attribute scenarios of the current user.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenarioList</returns>
        public PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenarioList> GetAllCustomRoadAttributeScenariosWithHttpInfo(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0)
        {
            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.GetAllCustomRoadAttributeScenarios";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomRoadAttributeScenarioList>("/road-attributes", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomRoadAttributeScenarios", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a list of all custom road attribute scenarios of the current user.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenarioList</returns>
        public async System.Threading.Tasks.Task<CustomRoadAttributeScenarioList> GetAllCustomRoadAttributeScenariosAsync(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenarioList> localVarResponse = await GetAllCustomRoadAttributeScenariosWithHttpInfoAsync(results, polylineFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of all custom road attribute scenarios of the current user.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenarioList)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenarioList>> GetAllCustomRoadAttributeScenariosWithHttpInfoAsync(List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.GetAllCustomRoadAttributeScenarios";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomRoadAttributeScenarioList>("/road-attributes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomRoadAttributeScenarios", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a custom road attribute scenario by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenario</returns>
        public CustomRoadAttributeScenario GetCustomRoadAttributeScenario(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0)
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> localVarResponse = GetCustomRoadAttributeScenarioWithHttpInfo(scenarioId, results, polylineFormat);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a custom road attribute scenario by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenario</returns>
        public PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> GetCustomRoadAttributeScenarioWithHttpInfo(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling CustomRoadAttributesApi->GetCustomRoadAttributeScenario");
            }

            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", PTV.Developer.Clients.data.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.GetCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CustomRoadAttributeScenario>("/road-attributes/{scenarioId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get a custom road attribute scenario by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenario</returns>
        public async System.Threading.Tasks.Task<CustomRoadAttributeScenario> GetCustomRoadAttributeScenarioAsync(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> localVarResponse = await GetCustomRoadAttributeScenarioWithHttpInfoAsync(scenarioId, results, polylineFormat, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a custom road attribute scenario by its ID.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenario)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario>> GetCustomRoadAttributeScenarioWithHttpInfoAsync(Guid? scenarioId, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling CustomRoadAttributesApi->GetCustomRoadAttributeScenario");
            }


            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", PTV.Developer.Clients.data.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.GetCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CustomRoadAttributeScenario>("/road-attributes/{scenarioId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get roads from (click) points on a map.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RoadsResponse</returns>
        public RoadsResponse GetRoads(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0)
        {
            PTV.Developer.Clients.data.Client.ApiResponse<RoadsResponse> localVarResponse = GetRoadsWithHttpInfo(points, polylineFormat, polylineMapType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get roads from (click) points on a map.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RoadsResponse</returns>
        public PTV.Developer.Clients.data.Client.ApiResponse<RoadsResponse> GetRoadsWithHttpInfo(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0)
        {
            // verify the required parameter 'points' is set
            if (points == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'points' when calling CustomRoadAttributesApi->GetRoads");
            }

            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "points", points));
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }
            if (polylineMapType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineMapType", polylineMapType));
            }

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.GetRoads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<RoadsResponse>("/roads", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get roads from (click) points on a map.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RoadsResponse</returns>
        public async System.Threading.Tasks.Task<RoadsResponse> GetRoadsAsync(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.data.Client.ApiResponse<RoadsResponse> localVarResponse = await GetRoadsWithHttpInfoAsync(points, polylineFormat, polylineMapType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Get roads from (click) points on a map.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="points">A point, a polyline or a polygon to select roads. Combined transports will not be selected.  * For a single point the road(s) closest to this point will be returned.  Usually, a single road will be returned, but if there are multiple roads at the same distance from the point, all of them will be returned. This is most likely to happen on road crossings. * Several points where the first and last point are different will be considered a polyline and  all roads intersected by this polyline will be returned. * If the polyline is closed, i.e. the first and the last point are the same, the polyline defines  a polygon and all roads whose complete polyline is within the polygon will be returned. A polygon must be  valid according to [OGC](https://www.ogc.org/standard/sfa/). Holes within polygons are not supported.  Format: &#x60;&lt;point1_lat&gt;,&lt;point1_lon&gt;,...,&lt;pointN_lat&gt;,&lt;pointN_lon&gt;&#x60;.  A request will be rejected if it * does not contain an even number of coordinates, * contains a closed polyline defining an invalid polygon according to OGC, * contains invalid coordinates or * covers more than 5000 roads.</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  The polylines are used for the selection, hence the selected roads can differ when using different values. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RoadsResponse)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.data.Client.ApiResponse<RoadsResponse>> GetRoadsWithHttpInfoAsync(string points, PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'points' is set
            if (points == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'points' when calling CustomRoadAttributesApi->GetRoads");
            }


            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "points", points));
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }
            if (polylineMapType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineMapType", polylineMapType));
            }

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.GetRoads";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<RoadsResponse>("/roads", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetRoads", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Perform a full update of an existing custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CustomRoadAttributeScenario</returns>
        public CustomRoadAttributeScenario UpdateCustomRoadAttributeScenario(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0)
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> localVarResponse = UpdateCustomRoadAttributeScenarioWithHttpInfo(scenarioId, customRoadAttributeScenario, results, polylineFormat, polylineMapType);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Perform a full update of an existing custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CustomRoadAttributeScenario</returns>
        public PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> UpdateCustomRoadAttributeScenarioWithHttpInfo(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0)
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling CustomRoadAttributesApi->UpdateCustomRoadAttributeScenario");
            }

            // verify the required parameter 'customRoadAttributeScenario' is set
            if (customRoadAttributeScenario == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'customRoadAttributeScenario' when calling CustomRoadAttributesApi->UpdateCustomRoadAttributeScenario");
            }

            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", PTV.Developer.Clients.data.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }
            if (polylineMapType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineMapType", polylineMapType));
            }
            localVarRequestOptions.Data = customRoadAttributeScenario;

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.UpdateCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CustomRoadAttributeScenario>("/road-attributes/{scenarioId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Perform a full update of an existing custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CustomRoadAttributeScenario</returns>
        public async System.Threading.Tasks.Task<CustomRoadAttributeScenario> UpdateCustomRoadAttributeScenarioAsync(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario> localVarResponse = await UpdateCustomRoadAttributeScenarioWithHttpInfoAsync(scenarioId, customRoadAttributeScenario, results, polylineFormat, polylineMapType, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  Perform a full update of an existing custom road attribute scenario.
        /// </summary>
        /// <exception cref="PTV.Developer.Clients.data.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="scenarioId">The ID of the custom road attribute scenario.</param>
        /// <param name="customRoadAttributeScenario">The custom road attribute scenario to be updated.</param>
        /// <param name="results">Defines which results will be returned. (optional)</param>
        /// <param name="polylineFormat"> (optional)</param>
        /// <param name="polylineMapType">Defines whether polylines should match the Raster Maps API or the Vector Maps API.  This parameter affects the polylines returned in the response of this request and all subsequent requests referring to this scenario, if polylines are to be returned. Once created or updated, it is not possible to request the polyline for this scenario matching a different map. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CustomRoadAttributeScenario)</returns>
        public async System.Threading.Tasks.Task<PTV.Developer.Clients.data.Client.ApiResponse<CustomRoadAttributeScenario>> UpdateCustomRoadAttributeScenarioWithHttpInfoAsync(Guid? scenarioId, CustomRoadAttributeScenario customRoadAttributeScenario, List<RoadAttributesResults>? results = default(List<RoadAttributesResults>?), PolylineFormat? polylineFormat = default(PolylineFormat?), PolylineMapType? polylineMapType = default(PolylineMapType?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'scenarioId' is set
            if (scenarioId == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'scenarioId' when calling CustomRoadAttributesApi->UpdateCustomRoadAttributeScenario");
            }

            // verify the required parameter 'customRoadAttributeScenario' is set
            if (customRoadAttributeScenario == null)
            {
                throw new PTV.Developer.Clients.data.Client.ApiException(400, "Missing required parameter 'customRoadAttributeScenario' when calling CustomRoadAttributesApi->UpdateCustomRoadAttributeScenario");
            }


            PTV.Developer.Clients.data.Client.RequestOptions localVarRequestOptions = new PTV.Developer.Clients.data.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = PTV.Developer.Clients.data.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("scenarioId", PTV.Developer.Clients.data.Client.ClientUtils.ParameterToString(scenarioId)); // path parameter
            if (results != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("multi", "results", results));
            }
            if (polylineFormat != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineFormat", polylineFormat));
            }
            if (polylineMapType != null)
            {
                localVarRequestOptions.QueryParameters.Add(PTV.Developer.Clients.data.Client.ClientUtils.ParameterToMultiMap("", "polylineMapType", polylineMapType));
            }
            localVarRequestOptions.Data = customRoadAttributeScenario;

            localVarRequestOptions.Operation = "CustomRoadAttributesApi.UpdateCustomRoadAttributeScenario";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (apiKeyAuth) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("apiKey")))
            {
                localVarRequestOptions.HeaderParameters.Add("apiKey", this.Configuration.GetApiKeyWithPrefix("apiKey"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CustomRoadAttributeScenario>("/road-attributes/{scenarioId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomRoadAttributeScenario", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
