/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// ApiChange
    /// </summary>
    [DataContract(Name = "ApiChange")]
    public partial class ApiChange : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ApiChangeType Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiChange" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ApiChange() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiChange" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="date">The date this API change took effect. Formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). (required).</param>
        /// <param name="description">The API change description. (required).</param>
        /// <param name="api">The API the API change refers to..</param>
        /// <param name="varVersion">The version of the API the API change refers to..</param>
        /// <param name="link">A link to a website with further information..</param>
        public ApiChange(ApiChangeType type = default(ApiChangeType), DateTimeOffset? date = default(DateTimeOffset?), string description = default(string), string api = default(string), string varVersion = default(string), string link = default(string))
        {
            this.Type = type;
            // to ensure "date" is required (not null)
            if (date == null)
            {
                throw new ArgumentNullException("date is a required property for ApiChange and cannot be null");
            }
            this.Date = date;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ApiChange and cannot be null");
            }
            this.Description = description;
            this.Api = api;
            this.VarVersion = varVersion;
            this.Link = link;
        }

        /// <summary>
        /// The date this API change took effect. Formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        /// <value>The date this API change took effect. Formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).</value>
        [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset? Date { get; set; }

        /// <summary>
        /// The API change description.
        /// </summary>
        /// <value>The API change description.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The API the API change refers to.
        /// </summary>
        /// <value>The API the API change refers to.</value>
        [DataMember(Name = "api", EmitDefaultValue = true)]
        public string Api { get; set; }

        /// <summary>
        /// The version of the API the API change refers to.
        /// </summary>
        /// <value>The version of the API the API change refers to.</value>
        [DataMember(Name = "version", EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// A link to a website with further information.
        /// </summary>
        /// <value>A link to a website with further information.</value>
        [DataMember(Name = "link", EmitDefaultValue = true)]
        public string Link { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApiChange {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Api: ").Append(Api).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
