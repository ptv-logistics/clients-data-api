/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// A custom road attribute scenario.
    /// </summary>
    [DataContract(Name = "CustomRoadAttributeScenario")]
    public partial class CustomRoadAttributeScenario : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomRoadAttributeScenario" /> class.
        /// </summary>
        /// <param name="name">A user-defined name of the custom road attribute scenario. If specified, it must be unique for the current user. This name can be used in other APIs instead of its ID, then it must not contain a comma..</param>
        /// <param name="description">A user-defined description of the custom road attribute scenario..</param>
        /// <param name="roadsToBeAttributed">A collection of roads and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item..</param>
        /// <param name="combinedTransportsToBeAttributed">A collection of combined transports and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item..</param>
        /// <param name="shared">If true, this custom road attribute scenario can be used by every user by its ID. Other users than the owner cannot modify or delete it nor will it be listed with **getAllCustomRoadAttributeScenarios**. (default to false).</param>
        /// <param name="active">If false, this custom road attribute scenario will be marked inactive and not used for subsequent route calculations until set active again. This is useful to ignore the scenario without deleting its contents. (default to true).</param>
        /// <param name="revision">The revision number of the custom road attribute scenario which will automatically be maintained by the server. In responses it will contain the number of updates of this specific scenario. When creating a scenario, it will be ignored. When updating a scenario, pass the number which you got from the server in the corresponding get request to make sure that the scenario has not been changed in the meantime. The server will reject updates for which the revision number does not match the revision stored in the database. When left empty in an update request, any changes will be overwritten..</param>
        public CustomRoadAttributeScenario(string name = default(string), string description = default(string), List<RoadsToBeAttributed> roadsToBeAttributed = default(List<RoadsToBeAttributed>), List<CombinedTransportToBeAttributed> combinedTransportsToBeAttributed = default(List<CombinedTransportToBeAttributed>), bool? shared = false, bool? active = true, int? revision = default(int?))
        {
            this.Name = name;
            this.Description = description;
            this.RoadsToBeAttributed = roadsToBeAttributed;
            this.CombinedTransportsToBeAttributed = combinedTransportsToBeAttributed;
            // use default value if no "shared" provided
            this.Shared = shared ?? false;
            // use default value if no "active" provided
            this.Active = active ?? true;
            this.Revision = revision;
        }

        /// <summary>
        /// The ID of the custom road attribute scenario.
        /// </summary>
        /// <value>The ID of the custom road attribute scenario.</value>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public Guid? Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// A user-defined name of the custom road attribute scenario. If specified, it must be unique for the current user. This name can be used in other APIs instead of its ID, then it must not contain a comma.
        /// </summary>
        /// <value>A user-defined name of the custom road attribute scenario. If specified, it must be unique for the current user. This name can be used in other APIs instead of its ID, then it must not contain a comma.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A user-defined description of the custom road attribute scenario.
        /// </summary>
        /// <value>A user-defined description of the custom road attribute scenario.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// A collection of roads and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item.
        /// </summary>
        /// <value>A collection of roads and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item.</value>
        [DataMember(Name = "roadsToBeAttributed", EmitDefaultValue = false)]
        public List<RoadsToBeAttributed> RoadsToBeAttributed { get; set; }

        /// <summary>
        /// A collection of combined transports and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item.
        /// </summary>
        /// <value>A collection of combined transports and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item.</value>
        [DataMember(Name = "combinedTransportsToBeAttributed", EmitDefaultValue = false)]
        public List<CombinedTransportToBeAttributed> CombinedTransportsToBeAttributed { get; set; }

        /// <summary>
        /// If true, this custom road attribute scenario can be used by every user by its ID. Other users than the owner cannot modify or delete it nor will it be listed with **getAllCustomRoadAttributeScenarios**.
        /// </summary>
        /// <value>If true, this custom road attribute scenario can be used by every user by its ID. Other users than the owner cannot modify or delete it nor will it be listed with **getAllCustomRoadAttributeScenarios**.</value>
        [DataMember(Name = "shared", EmitDefaultValue = true)]
        public bool? Shared { get; set; }

        /// <summary>
        /// If false, this custom road attribute scenario will be marked inactive and not used for subsequent route calculations until set active again. This is useful to ignore the scenario without deleting its contents.
        /// </summary>
        /// <value>If false, this custom road attribute scenario will be marked inactive and not used for subsequent route calculations until set active again. This is useful to ignore the scenario without deleting its contents.</value>
        [DataMember(Name = "active", EmitDefaultValue = true)]
        public bool? Active { get; set; }

        /// <summary>
        /// The revision number of the custom road attribute scenario which will automatically be maintained by the server. In responses it will contain the number of updates of this specific scenario. When creating a scenario, it will be ignored. When updating a scenario, pass the number which you got from the server in the corresponding get request to make sure that the scenario has not been changed in the meantime. The server will reject updates for which the revision number does not match the revision stored in the database. When left empty in an update request, any changes will be overwritten.
        /// </summary>
        /// <value>The revision number of the custom road attribute scenario which will automatically be maintained by the server. In responses it will contain the number of updates of this specific scenario. When creating a scenario, it will be ignored. When updating a scenario, pass the number which you got from the server in the corresponding get request to make sure that the scenario has not been changed in the meantime. The server will reject updates for which the revision number does not match the revision stored in the database. When left empty in an update request, any changes will be overwritten.</value>
        [DataMember(Name = "revision", EmitDefaultValue = true)]
        public int? Revision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomRoadAttributeScenario {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RoadsToBeAttributed: ").Append(RoadsToBeAttributed).Append("\n");
            sb.Append("  CombinedTransportsToBeAttributed: ").Append(CombinedTransportsToBeAttributed).Append("\n");
            sb.Append("  Shared: ").Append(Shared).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Revision (int?) minimum
            if (this.Revision < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Revision, must be a value greater than or equal to 0.", new [] { "Revision" });
            }

            yield break;
        }
    }

}
