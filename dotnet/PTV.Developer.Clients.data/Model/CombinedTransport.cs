/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// CombinedTransport
    /// </summary>
    [DataContract(Name = "CombinedTransport")]
    public partial class CombinedTransport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedTransport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CombinedTransport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedTransport" /> class.
        /// </summary>
        /// <param name="polyline">The polyline of the combined transport in the format specified by **polylineFormat**. (required).</param>
        /// <param name="name">The name of the combined transport. **Note:** The names of the start location and the destination location do not have to match with the name of the combined transport. In such cases the combined transport name may refer to a roundtrip with one or more  intermediate stops. However, this combined transport represents only the part between the start location  and the destination location. (required).</param>
        /// <param name="duration">The approximated duration of the combined transport [s]. (required).</param>
        /// <param name="type">The type of the combined transport, i.e. how the vehicle is transported.  * &#x60;BOAT&#x60; - The combined transport is by boat, i.e. on a ferry.  * &#x60;RAIL&#x60; - The combined transport is by rail, i.e. on a train or rail shuttle. (required).</param>
        /// <param name="start">start (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="allowedFor">Comma-separated list of vehicles that may use this combined transport.  Empty, if not allowed for any of these vehicle, e.g. if allowed only for pedestrians.  Values can be &#x60;CAR&#x60;,&#x60;VAN&#x60;,&#x60;TRUCK&#x60;. (required).</param>
        /// <param name="waypointsParameter">The combined transport represented as a string that can be used as a **waypoints** parameter in the method **calculateRoute** of the Routing API. (required).</param>
        public CombinedTransport(string polyline = default(string), string name = default(string), int? duration = default(int?), string type = default(string), CombinedTransportLocation start = default(CombinedTransportLocation), CombinedTransportLocation destination = default(CombinedTransportLocation), string allowedFor = default(string), string waypointsParameter = default(string))
        {
            // to ensure "polyline" is required (not null)
            if (polyline == null)
            {
                throw new ArgumentNullException("polyline is a required property for CombinedTransport and cannot be null");
            }
            this.Polyline = polyline;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for CombinedTransport and cannot be null");
            }
            this.Name = name;
            // to ensure "duration" is required (not null)
            if (duration == null)
            {
                throw new ArgumentNullException("duration is a required property for CombinedTransport and cannot be null");
            }
            this.Duration = duration;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CombinedTransport and cannot be null");
            }
            this.Type = type;
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new ArgumentNullException("start is a required property for CombinedTransport and cannot be null");
            }
            this.Start = start;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for CombinedTransport and cannot be null");
            }
            this.Destination = destination;
            // to ensure "allowedFor" is required (not null)
            if (allowedFor == null)
            {
                throw new ArgumentNullException("allowedFor is a required property for CombinedTransport and cannot be null");
            }
            this.AllowedFor = allowedFor;
            // to ensure "waypointsParameter" is required (not null)
            if (waypointsParameter == null)
            {
                throw new ArgumentNullException("waypointsParameter is a required property for CombinedTransport and cannot be null");
            }
            this.WaypointsParameter = waypointsParameter;
        }

        /// <summary>
        /// The polyline of the combined transport in the format specified by **polylineFormat**.
        /// </summary>
        /// <value>The polyline of the combined transport in the format specified by **polylineFormat**.</value>
        [DataMember(Name = "polyline", IsRequired = true, EmitDefaultValue = true)]
        public string Polyline { get; set; }

        /// <summary>
        /// The name of the combined transport. **Note:** The names of the start location and the destination location do not have to match with the name of the combined transport. In such cases the combined transport name may refer to a roundtrip with one or more  intermediate stops. However, this combined transport represents only the part between the start location  and the destination location.
        /// </summary>
        /// <value>The name of the combined transport. **Note:** The names of the start location and the destination location do not have to match with the name of the combined transport. In such cases the combined transport name may refer to a roundtrip with one or more  intermediate stops. However, this combined transport represents only the part between the start location  and the destination location.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The approximated duration of the combined transport [s].
        /// </summary>
        /// <value>The approximated duration of the combined transport [s].</value>
        [DataMember(Name = "duration", IsRequired = true, EmitDefaultValue = true)]
        public int? Duration { get; set; }

        /// <summary>
        /// The type of the combined transport, i.e. how the vehicle is transported.  * &#x60;BOAT&#x60; - The combined transport is by boat, i.e. on a ferry.  * &#x60;RAIL&#x60; - The combined transport is by rail, i.e. on a train or rail shuttle.
        /// </summary>
        /// <value>The type of the combined transport, i.e. how the vehicle is transported.  * &#x60;BOAT&#x60; - The combined transport is by boat, i.e. on a ferry.  * &#x60;RAIL&#x60; - The combined transport is by rail, i.e. on a train or rail shuttle.</value>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = true)]
        public CombinedTransportLocation Start { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public CombinedTransportLocation Destination { get; set; }

        /// <summary>
        /// Comma-separated list of vehicles that may use this combined transport.  Empty, if not allowed for any of these vehicle, e.g. if allowed only for pedestrians.  Values can be &#x60;CAR&#x60;,&#x60;VAN&#x60;,&#x60;TRUCK&#x60;.
        /// </summary>
        /// <value>Comma-separated list of vehicles that may use this combined transport.  Empty, if not allowed for any of these vehicle, e.g. if allowed only for pedestrians.  Values can be &#x60;CAR&#x60;,&#x60;VAN&#x60;,&#x60;TRUCK&#x60;.</value>
        [DataMember(Name = "allowedFor", IsRequired = true, EmitDefaultValue = true)]
        public string AllowedFor { get; set; }

        /// <summary>
        /// The combined transport represented as a string that can be used as a **waypoints** parameter in the method **calculateRoute** of the Routing API.
        /// </summary>
        /// <value>The combined transport represented as a string that can be used as a **waypoints** parameter in the method **calculateRoute** of the Routing API.</value>
        /// <example>combinedTransport&#x3D;54.5009693,11.2273406,54.6604379,11.3608932</example>
        [DataMember(Name = "waypointsParameter", IsRequired = true, EmitDefaultValue = true)]
        public string WaypointsParameter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CombinedTransport {\n");
            sb.Append("  Polyline: ").Append(Polyline).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  AllowedFor: ").Append(AllowedFor).Append("\n");
            sb.Append("  WaypointsParameter: ").Append(WaypointsParameter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
