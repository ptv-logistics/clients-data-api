/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// CombinedTransportToBeAttributed
    /// </summary>
    [DataContract(Name = "CombinedTransportToBeAttributed")]
    public partial class CombinedTransportToBeAttributed : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedTransportToBeAttributed" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CombinedTransportToBeAttributed() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedTransportToBeAttributed" /> class.
        /// </summary>
        /// <param name="start">start (required).</param>
        /// <param name="destination">destination (required).</param>
        /// <param name="polyline">The polyline of the combined transports in the format specified by **polylineFormat**.  Only present in responses, will be ignored in requests..</param>
        /// <param name="name">The name of the combined transport.  Only present in responses, will be ignored in requests..</param>
        /// <param name="attributes">attributes (required).</param>
        /// <param name="unmatchedAfterMapUpdate">If **roadsToBeAttributed** or **combinedTransportsToBeAttributed** could not be matched to a new map after an update they are marked with this boolean flag. Unmatched **roadsToBeAttributed** or **combinedTransportsToBeAttributed** might cause some unwanted changes of behavior for the scenario. This parameter must not be true if it is sent as part of a request. (default to false).</param>
        /// <param name="description">A description of this set of attributed combined transports which is useful to refer to that in an application..</param>
        public CombinedTransportToBeAttributed(Location start = default(Location), Location destination = default(Location), string polyline = default(string), string name = default(string), CombinedTransportAttributes attributes = default(CombinedTransportAttributes), bool? unmatchedAfterMapUpdate = false, string description = default(string))
        {
            // to ensure "start" is required (not null)
            if (start == null)
            {
                throw new ArgumentNullException("start is a required property for CombinedTransportToBeAttributed and cannot be null");
            }
            this.Start = start;
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for CombinedTransportToBeAttributed and cannot be null");
            }
            this.Destination = destination;
            // to ensure "attributes" is required (not null)
            if (attributes == null)
            {
                throw new ArgumentNullException("attributes is a required property for CombinedTransportToBeAttributed and cannot be null");
            }
            this.Attributes = attributes;
            this.Polyline = polyline;
            this.Name = name;
            // use default value if no "unmatchedAfterMapUpdate" provided
            this.UnmatchedAfterMapUpdate = unmatchedAfterMapUpdate ?? false;
            this.Description = description;
        }

        /// <summary>
        /// Gets or Sets Start
        /// </summary>
        [DataMember(Name = "start", IsRequired = true, EmitDefaultValue = true)]
        public Location Start { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public Location Destination { get; set; }

        /// <summary>
        /// The polyline of the combined transports in the format specified by **polylineFormat**.  Only present in responses, will be ignored in requests.
        /// </summary>
        /// <value>The polyline of the combined transports in the format specified by **polylineFormat**.  Only present in responses, will be ignored in requests.</value>
        [DataMember(Name = "polyline", EmitDefaultValue = true)]
        public string Polyline { get; set; }

        /// <summary>
        /// The name of the combined transport.  Only present in responses, will be ignored in requests.
        /// </summary>
        /// <value>The name of the combined transport.  Only present in responses, will be ignored in requests.</value>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", IsRequired = true, EmitDefaultValue = true)]
        public CombinedTransportAttributes Attributes { get; set; }

        /// <summary>
        /// If **roadsToBeAttributed** or **combinedTransportsToBeAttributed** could not be matched to a new map after an update they are marked with this boolean flag. Unmatched **roadsToBeAttributed** or **combinedTransportsToBeAttributed** might cause some unwanted changes of behavior for the scenario. This parameter must not be true if it is sent as part of a request.
        /// </summary>
        /// <value>If **roadsToBeAttributed** or **combinedTransportsToBeAttributed** could not be matched to a new map after an update they are marked with this boolean flag. Unmatched **roadsToBeAttributed** or **combinedTransportsToBeAttributed** might cause some unwanted changes of behavior for the scenario. This parameter must not be true if it is sent as part of a request.</value>
        [DataMember(Name = "unmatchedAfterMapUpdate", EmitDefaultValue = true)]
        public bool? UnmatchedAfterMapUpdate { get; set; }

        /// <summary>
        /// A description of this set of attributed combined transports which is useful to refer to that in an application.
        /// </summary>
        /// <value>A description of this set of attributed combined transports which is useful to refer to that in an application.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CombinedTransportToBeAttributed {\n");
            sb.Append("  Start: ").Append(Start).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Polyline: ").Append(Polyline).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  UnmatchedAfterMapUpdate: ").Append(UnmatchedAfterMapUpdate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
