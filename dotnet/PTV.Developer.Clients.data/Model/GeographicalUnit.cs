/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// Base type for a geographical unit. Depending on how the data are built up a country can have subdivisions, e.g. a state in the US, or not. 
    /// </summary>
    [DataContract(Name = "GeographicalUnit")]
    public partial class GeographicalUnit : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Continent
        /// </summary>
        [DataMember(Name = "continent", IsRequired = true, EmitDefaultValue = true)]
        public Continent Continent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeographicalUnit" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GeographicalUnit() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GeographicalUnit" /> class.
        /// </summary>
        /// <param name="code">The code of the geographical unit represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision. (required).</param>
        /// <param name="country">The name of the country this geographical unit represents or belongs to. (required).</param>
        /// <param name="state">The name of the state this geographical unit represents. Not present if it represents a country..</param>
        /// <param name="continent">continent (required).</param>
        /// <param name="features">features (required).</param>
        public GeographicalUnit(string code = default(string), string country = default(string), string state = default(string), Continent continent = default(Continent), MapFeatures features = default(MapFeatures))
        {
            // to ensure "code" is required (not null)
            if (code == null)
            {
                throw new ArgumentNullException("code is a required property for GeographicalUnit and cannot be null");
            }
            this.Code = code;
            // to ensure "country" is required (not null)
            if (country == null)
            {
                throw new ArgumentNullException("country is a required property for GeographicalUnit and cannot be null");
            }
            this.Country = country;
            this.Continent = continent;
            // to ensure "features" is required (not null)
            if (features == null)
            {
                throw new ArgumentNullException("features is a required property for GeographicalUnit and cannot be null");
            }
            this.Features = features;
            this.State = state;
        }

        /// <summary>
        /// The code of the geographical unit represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
        /// </summary>
        /// <value>The code of the geographical unit represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.</value>
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public string Code { get; set; }

        /// <summary>
        /// The name of the country this geographical unit represents or belongs to.
        /// </summary>
        /// <value>The name of the country this geographical unit represents or belongs to.</value>
        [DataMember(Name = "country", IsRequired = true, EmitDefaultValue = true)]
        public string Country { get; set; }

        /// <summary>
        /// The name of the state this geographical unit represents. Not present if it represents a country.
        /// </summary>
        /// <value>The name of the state this geographical unit represents. Not present if it represents a country.</value>
        [DataMember(Name = "state", EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>
        [DataMember(Name = "features", IsRequired = true, EmitDefaultValue = true)]
        public MapFeatures Features { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GeographicalUnit {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Continent: ").Append(Continent).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Code (string) minLength
            if (this.Code != null && this.Code.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Code, length must be greater than 1.", new [] { "Code" });
            }

            // Country (string) minLength
            if (this.Country != null && this.Country.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Country, length must be greater than 1.", new [] { "Country" });
            }

            // State (string) minLength
            if (this.State != null && this.State.Length < 1)
            {
                yield return new ValidationResult("Invalid value for State, length must be greater than 1.", new [] { "State" });
            }

            yield break;
        }
    }

}
