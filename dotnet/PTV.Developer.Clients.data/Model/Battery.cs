/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// Physical properties of the battery regarding capacity and charging. It is null for an unpowered vehicle.  Relevant for &#x60;range calculation&#x60;.
    /// </summary>
    [DataContract(Name = "Battery")]
    public partial class Battery : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Battery" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Battery() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Battery" /> class.
        /// </summary>
        /// <param name="totalCapacity">The total battery capacity [kWh]. (required).</param>
        /// <param name="acChargingPower">Charging power AC [kW]. (required).</param>
        /// <param name="dcChargingPower">Charging power DC [kW]. (required).</param>
        /// <param name="plugs">List of charging plugs the vehicle is compatible with. (required).</param>
        public Battery(double? totalCapacity = default(double?), int? acChargingPower = default(int?), int? dcChargingPower = default(int?), List<string> plugs = default(List<string>))
        {
            // to ensure "totalCapacity" is required (not null)
            if (totalCapacity == null)
            {
                throw new ArgumentNullException("totalCapacity is a required property for Battery and cannot be null");
            }
            this.TotalCapacity = totalCapacity;
            // to ensure "acChargingPower" is required (not null)
            if (acChargingPower == null)
            {
                throw new ArgumentNullException("acChargingPower is a required property for Battery and cannot be null");
            }
            this.AcChargingPower = acChargingPower;
            // to ensure "dcChargingPower" is required (not null)
            if (dcChargingPower == null)
            {
                throw new ArgumentNullException("dcChargingPower is a required property for Battery and cannot be null");
            }
            this.DcChargingPower = dcChargingPower;
            // to ensure "plugs" is required (not null)
            if (plugs == null)
            {
                throw new ArgumentNullException("plugs is a required property for Battery and cannot be null");
            }
            this.Plugs = plugs;
        }

        /// <summary>
        /// The total battery capacity [kWh].
        /// </summary>
        /// <value>The total battery capacity [kWh].</value>
        [DataMember(Name = "totalCapacity", IsRequired = true, EmitDefaultValue = true)]
        public double? TotalCapacity { get; set; }

        /// <summary>
        /// Charging power AC [kW].
        /// </summary>
        /// <value>Charging power AC [kW].</value>
        [DataMember(Name = "acChargingPower", IsRequired = true, EmitDefaultValue = true)]
        public int? AcChargingPower { get; set; }

        /// <summary>
        /// Charging power DC [kW].
        /// </summary>
        /// <value>Charging power DC [kW].</value>
        [DataMember(Name = "dcChargingPower", IsRequired = true, EmitDefaultValue = true)]
        public int? DcChargingPower { get; set; }

        /// <summary>
        /// List of charging plugs the vehicle is compatible with.
        /// </summary>
        /// <value>List of charging plugs the vehicle is compatible with.</value>
        /// <example>[&quot;CCS 2&quot;,&quot;Type 2&quot;]</example>
        [DataMember(Name = "plugs", IsRequired = true, EmitDefaultValue = true)]
        public List<string> Plugs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Battery {\n");
            sb.Append("  TotalCapacity: ").Append(TotalCapacity).Append("\n");
            sb.Append("  AcChargingPower: ").Append(AcChargingPower).Append("\n");
            sb.Append("  DcChargingPower: ").Append(DcChargingPower).Append("\n");
            sb.Append("  Plugs: ").Append(Plugs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
