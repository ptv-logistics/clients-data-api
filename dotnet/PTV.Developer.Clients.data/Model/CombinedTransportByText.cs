/*
 * Data
 *
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.data.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.data.Model
{
    /// <summary>
    /// The parameters to search for in the combined transport data. This parameter is mutually exclusive with **position**.
    /// </summary>
    [DataContract(Name = "CombinedTransportByText")]
    public partial class CombinedTransportByText : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedTransportByText" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CombinedTransportByText() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CombinedTransportByText" /> class.
        /// </summary>
        /// <param name="query">The text to match among the name, start or destination of the combined transport. The text matches the data if the data or a substring of it begins with the specified text after delimiters such  as spaces or hyphens. Before matching the strings, umlauts, accents and other character decorations are removed. The result is ordered such that case-insensitive exact matches including accents, umlauts and other  decorations will appear before other matches. (required).</param>
        /// <param name="allowedCountries">Comma-separated list of countries the search is limited to. By default, all countries are allowed. If this parameter is present, only combined transports where either the start or the destination is located in one of the allowed countries are returned.  Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision..</param>
        public CombinedTransportByText(string query = default(string), string allowedCountries = default(string))
        {
            // to ensure "query" is required (not null)
            if (query == null)
            {
                throw new ArgumentNullException("query is a required property for CombinedTransportByText and cannot be null");
            }
            this.Query = query;
            this.AllowedCountries = allowedCountries;
        }

        /// <summary>
        /// The text to match among the name, start or destination of the combined transport. The text matches the data if the data or a substring of it begins with the specified text after delimiters such  as spaces or hyphens. Before matching the strings, umlauts, accents and other character decorations are removed. The result is ordered such that case-insensitive exact matches including accents, umlauts and other  decorations will appear before other matches.
        /// </summary>
        /// <value>The text to match among the name, start or destination of the combined transport. The text matches the data if the data or a substring of it begins with the specified text after delimiters such  as spaces or hyphens. Before matching the strings, umlauts, accents and other character decorations are removed. The result is ordered such that case-insensitive exact matches including accents, umlauts and other  decorations will appear before other matches.</value>
        [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
        public string Query { get; set; }

        /// <summary>
        /// Comma-separated list of countries the search is limited to. By default, all countries are allowed. If this parameter is present, only combined transports where either the start or the destination is located in one of the allowed countries are returned.  Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
        /// </summary>
        /// <value>Comma-separated list of countries the search is limited to. By default, all countries are allowed. If this parameter is present, only combined transports where either the start or the destination is located in one of the allowed countries are returned.  Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.</value>
        [DataMember(Name = "allowedCountries", EmitDefaultValue = true)]
        public string AllowedCountries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CombinedTransportByText {\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  AllowedCountries: ").Append(AllowedCountries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Query (string) maxLength
            if (this.Query != null && this.Query.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Query, length must be less than 50.", new [] { "Query" });
            }

            // Query (string) minLength
            if (this.Query != null && this.Query.Length < 2)
            {
                yield return new ValidationResult("Invalid value for Query, length must be greater than 2.", new [] { "Query" });
            }

            yield break;
        }
    }

}
