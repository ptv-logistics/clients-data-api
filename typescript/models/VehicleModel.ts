/* tslint:disable */
/* eslint-disable */
/**
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Commercial } from './Commercial';
import {
    CommercialFromJSON,
    CommercialFromJSONTyped,
    CommercialToJSON,
} from './Commercial';
import type { Battery } from './Battery';
import {
    BatteryFromJSON,
    BatteryFromJSONTyped,
    BatteryToJSON,
} from './Battery';
import type { Engine } from './Engine';
import {
    EngineFromJSON,
    EngineFromJSONTyped,
    EngineToJSON,
} from './Engine';

/**
 * 
 * @export
 * @interface VehicleModel
 */
export interface VehicleModel {
    /**
     * The ID of the vehicle model. It is needed to identify a model-based vehicle in the Routing API.
     * @type {string}
     * @memberof VehicleModel
     */
    readonly id: string;
    /**
     * The predefined profile on which this vehicle model is based. Relevant for calculating routes with this vehicle model in Routing API.
     * @type {string}
     * @memberof VehicleModel
     */
    predefinedProfile: string;
    /**
     * The type of the vehicle. 
     * The model is able to calculate the consumption of combinations of tractor-like vehicles and trailer-like ones. The following vehicle types are supported.
     * 
     * Tractor-like vehicle types:
     * * `TRUCK` - Truck. Total permitted weight > 7.5t.
     * * `LCV` - Light Commercial Vehicle. Total permitted weight < 7.5t.
     * * `SCV` - Small Commercial Vehicle. Total permitted weight < 3.5t.
     * 
     * Trailer-like vehicle types:
     * * `TRAILER` - Trailer
     * * `SEMI_TRAILER` - Semi-trailer
     * * `BODY` - Body
     * 
     * This list can be extended at any time, clients should handle unknown values properly. Relevant for `range calculation`.
     * @type {string}
     * @memberof VehicleModel
     */
    vehicleType: string;
    /**
     * 
     * @type {Commercial}
     * @memberof VehicleModel
     */
    commercial: Commercial;
    /**
     * 
     * @type {Engine}
     * @memberof VehicleModel
     */
    engine?: Engine;
    /**
     * 
     * @type {Battery}
     * @memberof VehicleModel
     */
    battery?: Battery;
}

/**
 * Check if a given object implements the VehicleModel interface.
 */
export function instanceOfVehicleModel(value: object): value is VehicleModel {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('predefinedProfile' in value) || value['predefinedProfile'] === undefined) return false;
    if (!('vehicleType' in value) || value['vehicleType'] === undefined) return false;
    if (!('commercial' in value) || value['commercial'] === undefined) return false;
    return true;
}

export function VehicleModelFromJSON(json: any): VehicleModel {
    return VehicleModelFromJSONTyped(json, false);
}

export function VehicleModelFromJSONTyped(json: any, ignoreDiscriminator: boolean): VehicleModel {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'predefinedProfile': json['predefinedProfile'],
        'vehicleType': json['vehicleType'],
        'commercial': CommercialFromJSON(json['commercial']),
        'engine': json['engine'] == null ? undefined : EngineFromJSON(json['engine']),
        'battery': json['battery'] == null ? undefined : BatteryFromJSON(json['battery']),
    };
}

export function VehicleModelToJSON(value?: Omit<VehicleModel, 'id'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'predefinedProfile': value['predefinedProfile'],
        'vehicleType': value['vehicleType'],
        'commercial': CommercialToJSON(value['commercial']),
        'engine': EngineToJSON(value['engine']),
        'battery': BatteryToJSON(value['battery']),
    };
}

