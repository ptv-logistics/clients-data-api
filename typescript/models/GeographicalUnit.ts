/* tslint:disable */
/* eslint-disable */
/**
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Continent } from './Continent';
import {
    ContinentFromJSON,
    ContinentFromJSONTyped,
    ContinentToJSON,
} from './Continent';
import type { MapFeatures } from './MapFeatures';
import {
    MapFeaturesFromJSON,
    MapFeaturesFromJSONTyped,
    MapFeaturesToJSON,
} from './MapFeatures';

/**
 * Base type for a geographical unit. Depending
 * on how the data are built up a country can have subdivisions, e.g. a state
 * in the US, or not.
 * 
 * @export
 * @interface GeographicalUnit
 */
export interface GeographicalUnit {
    /**
     * The code of the geographical unit represented by its code according to [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
     * @type {string}
     * @memberof GeographicalUnit
     */
    code: string;
    /**
     * The name of the country this geographical unit represents or belongs to.
     * @type {string}
     * @memberof GeographicalUnit
     */
    country: string;
    /**
     * The name of the state this geographical unit represents. Not present if it represents a country.
     * @type {string}
     * @memberof GeographicalUnit
     */
    state?: string;
    /**
     * 
     * @type {Continent}
     * @memberof GeographicalUnit
     */
    continent: Continent;
    /**
     * 
     * @type {MapFeatures}
     * @memberof GeographicalUnit
     */
    features: MapFeatures;
}



/**
 * Check if a given object implements the GeographicalUnit interface.
 */
export function instanceOfGeographicalUnit(value: object): value is GeographicalUnit {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('country' in value) || value['country'] === undefined) return false;
    if (!('continent' in value) || value['continent'] === undefined) return false;
    if (!('features' in value) || value['features'] === undefined) return false;
    return true;
}

export function GeographicalUnitFromJSON(json: any): GeographicalUnit {
    return GeographicalUnitFromJSONTyped(json, false);
}

export function GeographicalUnitFromJSONTyped(json: any, ignoreDiscriminator: boolean): GeographicalUnit {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'],
        'country': json['country'],
        'state': json['state'] == null ? undefined : json['state'],
        'continent': ContinentFromJSON(json['continent']),
        'features': MapFeaturesFromJSON(json['features']),
    };
}

export function GeographicalUnitToJSON(value?: GeographicalUnit | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'code': value['code'],
        'country': value['country'],
        'state': value['state'],
        'continent': ContinentToJSON(value['continent']),
        'features': MapFeaturesToJSON(value['features']),
    };
}

