/* tslint:disable */
/* eslint-disable */
/**
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * The parameters to search for in the combined transport data. This parameter is mutually exclusive with **position**.
 * @export
 * @interface CombinedTransportByText
 */
export interface CombinedTransportByText {
    /**
     * The text to match among the name, start or destination of the combined transport.
     * The text matches the data if the data or a substring of it begins with the specified text after delimiters such 
     * as spaces or hyphens. Before matching the strings, umlauts, accents and other character decorations are removed.
     * The result is ordered such that case-insensitive exact matches including accents, umlauts and other 
     * decorations will appear before other matches.
     * @type {string}
     * @memberof CombinedTransportByText
     */
    query: string;
    /**
     * Comma-separated list of countries the search is limited to. By default, all countries are allowed. If this parameter is present, only combined transports where either the start or the destination is located in one of the allowed countries are returned. 
     * Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
     * @type {string}
     * @memberof CombinedTransportByText
     */
    allowedCountries?: string;
}

/**
 * Check if a given object implements the CombinedTransportByText interface.
 */
export function instanceOfCombinedTransportByText(value: object): value is CombinedTransportByText {
    if (!('query' in value) || value['query'] === undefined) return false;
    return true;
}

export function CombinedTransportByTextFromJSON(json: any): CombinedTransportByText {
    return CombinedTransportByTextFromJSONTyped(json, false);
}

export function CombinedTransportByTextFromJSONTyped(json: any, ignoreDiscriminator: boolean): CombinedTransportByText {
    if (json == null) {
        return json;
    }
    return {
        
        'query': json['query'],
        'allowedCountries': json['allowedCountries'] == null ? undefined : json['allowedCountries'],
    };
}

export function CombinedTransportByTextToJSON(value?: CombinedTransportByText | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'query': value['query'],
        'allowedCountries': value['allowedCountries'],
    };
}

