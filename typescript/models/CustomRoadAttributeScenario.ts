/* tslint:disable */
/* eslint-disable */
/**
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoadsToBeAttributed } from './RoadsToBeAttributed';
import {
    RoadsToBeAttributedFromJSON,
    RoadsToBeAttributedFromJSONTyped,
    RoadsToBeAttributedToJSON,
} from './RoadsToBeAttributed';
import type { CombinedTransportToBeAttributed } from './CombinedTransportToBeAttributed';
import {
    CombinedTransportToBeAttributedFromJSON,
    CombinedTransportToBeAttributedFromJSONTyped,
    CombinedTransportToBeAttributedToJSON,
} from './CombinedTransportToBeAttributed';

/**
 * A custom road attribute scenario.
 * @export
 * @interface CustomRoadAttributeScenario
 */
export interface CustomRoadAttributeScenario {
    /**
     * The ID of the custom road attribute scenario.
     * @type {string}
     * @memberof CustomRoadAttributeScenario
     */
    readonly id?: string;
    /**
     * A user-defined name of the custom road attribute scenario.
     * If specified, it must be unique for the current user.
     * This name can be used in other APIs instead of its ID, then it must not contain a comma.
     * @type {string}
     * @memberof CustomRoadAttributeScenario
     */
    name?: string;
    /**
     * A user-defined description of the custom road attribute scenario.
     * @type {string}
     * @memberof CustomRoadAttributeScenario
     */
    description?: string;
    /**
     * A collection of roads and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must
     * not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified. 
     * One of them must contain at least one item.
     * @type {Array<RoadsToBeAttributed>}
     * @memberof CustomRoadAttributeScenario
     */
    roadsToBeAttributed?: Array<RoadsToBeAttributed>;
    /**
     * A collection of combined transports and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must
     * not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified. 
     * One of them must contain at least one item.
     * @type {Array<CombinedTransportToBeAttributed>}
     * @memberof CustomRoadAttributeScenario
     */
    combinedTransportsToBeAttributed?: Array<CombinedTransportToBeAttributed>;
    /**
     * If true, this custom road attribute scenario can be used by every user by its ID.
     * Other users than the owner cannot modify or delete it nor will it be listed with **getAllCustomRoadAttributeScenarios**.
     * @type {boolean}
     * @memberof CustomRoadAttributeScenario
     */
    shared?: boolean;
    /**
     * If false, this custom road attribute scenario will be marked inactive and not used for subsequent route calculations until set active again.
     * This is useful to ignore the scenario without deleting its contents.
     * @type {boolean}
     * @memberof CustomRoadAttributeScenario
     */
    active?: boolean;
    /**
     * The revision number of the custom road attribute scenario which will automatically be maintained by the server.
     * In responses it will contain the number of updates of this specific scenario. When creating a scenario, it
     * will be ignored. When updating a scenario, pass the number which you got from the server in the corresponding
     * get request to make sure that the scenario has not been changed in the meantime. The server will reject updates
     * for which the revision number does not match the revision stored in the database.
     * When left empty in an update request, any changes will be overwritten.
     * @type {number}
     * @memberof CustomRoadAttributeScenario
     */
    revision?: number;
}

/**
 * Check if a given object implements the CustomRoadAttributeScenario interface.
 */
export function instanceOfCustomRoadAttributeScenario(value: object): value is CustomRoadAttributeScenario {
    return true;
}

export function CustomRoadAttributeScenarioFromJSON(json: any): CustomRoadAttributeScenario {
    return CustomRoadAttributeScenarioFromJSONTyped(json, false);
}

export function CustomRoadAttributeScenarioFromJSONTyped(json: any, ignoreDiscriminator: boolean): CustomRoadAttributeScenario {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'] == null ? undefined : json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'roadsToBeAttributed': json['roadsToBeAttributed'] == null ? undefined : ((json['roadsToBeAttributed'] as Array<any>).map(RoadsToBeAttributedFromJSON)),
        'combinedTransportsToBeAttributed': json['combinedTransportsToBeAttributed'] == null ? undefined : ((json['combinedTransportsToBeAttributed'] as Array<any>).map(CombinedTransportToBeAttributedFromJSON)),
        'shared': json['shared'] == null ? undefined : json['shared'],
        'active': json['active'] == null ? undefined : json['active'],
        'revision': json['revision'] == null ? undefined : json['revision'],
    };
}

export function CustomRoadAttributeScenarioToJSON(value?: Omit<CustomRoadAttributeScenario, 'id'> | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'description': value['description'],
        'roadsToBeAttributed': value['roadsToBeAttributed'] == null ? undefined : ((value['roadsToBeAttributed'] as Array<any>).map(RoadsToBeAttributedToJSON)),
        'combinedTransportsToBeAttributed': value['combinedTransportsToBeAttributed'] == null ? undefined : ((value['combinedTransportsToBeAttributed'] as Array<any>).map(CombinedTransportToBeAttributedToJSON)),
        'shared': value['shared'],
        'active': value['active'],
        'revision': value['revision'],
    };
}

