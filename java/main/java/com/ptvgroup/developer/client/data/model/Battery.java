/*
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.data.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.data.ApiClient;
/**
 * Physical properties of the battery regarding capacity and charging. It is null for an unpowered vehicle.  Relevant for &#x60;range calculation&#x60;.
 */
@JsonPropertyOrder({
  Battery.JSON_PROPERTY_TOTAL_CAPACITY,
  Battery.JSON_PROPERTY_AC_CHARGING_POWER,
  Battery.JSON_PROPERTY_DC_CHARGING_POWER,
  Battery.JSON_PROPERTY_PLUGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-29T11:47:47.660663945Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class Battery {
  public static final String JSON_PROPERTY_TOTAL_CAPACITY = "totalCapacity";
  private Double totalCapacity;

  public static final String JSON_PROPERTY_AC_CHARGING_POWER = "acChargingPower";
  private Integer acChargingPower;

  public static final String JSON_PROPERTY_DC_CHARGING_POWER = "dcChargingPower";
  private Integer dcChargingPower;

  public static final String JSON_PROPERTY_PLUGS = "plugs";
  private List<String> plugs = new ArrayList<>();

  public Battery() { 
  }

  public Battery totalCapacity(Double totalCapacity) {
    this.totalCapacity = totalCapacity;
    return this;
  }

  /**
   * The total battery capacity [kWh].
   * @return totalCapacity
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_CAPACITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Double getTotalCapacity() {
    return totalCapacity;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_CAPACITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalCapacity(Double totalCapacity) {
    this.totalCapacity = totalCapacity;
  }


  public Battery acChargingPower(Integer acChargingPower) {
    this.acChargingPower = acChargingPower;
    return this;
  }

  /**
   * Charging power AC [kW].
   * @return acChargingPower
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AC_CHARGING_POWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getAcChargingPower() {
    return acChargingPower;
  }


  @JsonProperty(JSON_PROPERTY_AC_CHARGING_POWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAcChargingPower(Integer acChargingPower) {
    this.acChargingPower = acChargingPower;
  }


  public Battery dcChargingPower(Integer dcChargingPower) {
    this.dcChargingPower = dcChargingPower;
    return this;
  }

  /**
   * Charging power DC [kW].
   * @return dcChargingPower
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DC_CHARGING_POWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDcChargingPower() {
    return dcChargingPower;
  }


  @JsonProperty(JSON_PROPERTY_DC_CHARGING_POWER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDcChargingPower(Integer dcChargingPower) {
    this.dcChargingPower = dcChargingPower;
  }


  public Battery plugs(List<String> plugs) {
    this.plugs = plugs;
    return this;
  }

  public Battery addPlugsItem(String plugsItem) {
    if (this.plugs == null) {
      this.plugs = new ArrayList<>();
    }
    this.plugs.add(plugsItem);
    return this;
  }

  /**
   * List of charging plugs the vehicle is compatible with.
   * @return plugs
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLUGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<String> getPlugs() {
    return plugs;
  }


  @JsonProperty(JSON_PROPERTY_PLUGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlugs(List<String> plugs) {
    this.plugs = plugs;
  }


  /**
   * Return true if this Battery object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Battery battery = (Battery) o;
    return Objects.equals(this.totalCapacity, battery.totalCapacity) &&
        Objects.equals(this.acChargingPower, battery.acChargingPower) &&
        Objects.equals(this.dcChargingPower, battery.dcChargingPower) &&
        Objects.equals(this.plugs, battery.plugs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCapacity, acChargingPower, dcChargingPower, plugs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Battery {\n");
    sb.append("    totalCapacity: ").append(toIndentedString(totalCapacity)).append("\n");
    sb.append("    acChargingPower: ").append(toIndentedString(acChargingPower)).append("\n");
    sb.append("    dcChargingPower: ").append(toIndentedString(dcChargingPower)).append("\n");
    sb.append("    plugs: ").append(toIndentedString(plugs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `totalCapacity` to the URL query string
    if (getTotalCapacity() != null) {
      joiner.add(String.format("%stotalCapacity%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTotalCapacity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `acChargingPower` to the URL query string
    if (getAcChargingPower() != null) {
      joiner.add(String.format("%sacChargingPower%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAcChargingPower()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dcChargingPower` to the URL query string
    if (getDcChargingPower() != null) {
      joiner.add(String.format("%sdcChargingPower%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDcChargingPower()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `plugs` to the URL query string
    if (getPlugs() != null) {
      for (int i = 0; i < getPlugs().size(); i++) {
        joiner.add(String.format("%splugs%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getPlugs().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    return joiner.toString();
  }
}

