/*
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.data.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.data.model.CombinedTransportToBeAttributed;
import com.ptvgroup.developer.client.data.model.RoadsToBeAttributed;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.data.ApiClient;
/**
 * A custom road attribute scenario.
 */
@JsonPropertyOrder({
  CustomRoadAttributeScenario.JSON_PROPERTY_ID,
  CustomRoadAttributeScenario.JSON_PROPERTY_NAME,
  CustomRoadAttributeScenario.JSON_PROPERTY_DESCRIPTION,
  CustomRoadAttributeScenario.JSON_PROPERTY_ROADS_TO_BE_ATTRIBUTED,
  CustomRoadAttributeScenario.JSON_PROPERTY_COMBINED_TRANSPORTS_TO_BE_ATTRIBUTED,
  CustomRoadAttributeScenario.JSON_PROPERTY_SHARED,
  CustomRoadAttributeScenario.JSON_PROPERTY_ACTIVE,
  CustomRoadAttributeScenario.JSON_PROPERTY_REVISION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-29T11:47:47.660663945Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CustomRoadAttributeScenario {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ROADS_TO_BE_ATTRIBUTED = "roadsToBeAttributed";
  private List<RoadsToBeAttributed> roadsToBeAttributed = new ArrayList<>();

  public static final String JSON_PROPERTY_COMBINED_TRANSPORTS_TO_BE_ATTRIBUTED = "combinedTransportsToBeAttributed";
  private List<CombinedTransportToBeAttributed> combinedTransportsToBeAttributed = new ArrayList<>();

  public static final String JSON_PROPERTY_SHARED = "shared";
  private Boolean shared = false;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active = true;

  public static final String JSON_PROPERTY_REVISION = "revision";
  private Integer revision;

  public CustomRoadAttributeScenario() { 
  }

  @JsonCreator
  public CustomRoadAttributeScenario(
    @JsonProperty(JSON_PROPERTY_ID) UUID id
  ) {
  this();
    this.id = id;
  }

  /**
   * The ID of the custom road attribute scenario.
   * @return id
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UUID getId() {
    return id;
  }




  public CustomRoadAttributeScenario name(String name) {
    this.name = name;
    return this;
  }

  /**
   * A user-defined name of the custom road attribute scenario. If specified, it must be unique for the current user. This name can be used in other APIs instead of its ID, then it must not contain a comma.
   * @return name
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public CustomRoadAttributeScenario description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A user-defined description of the custom road attribute scenario.
   * @return description
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CustomRoadAttributeScenario roadsToBeAttributed(List<RoadsToBeAttributed> roadsToBeAttributed) {
    this.roadsToBeAttributed = roadsToBeAttributed;
    return this;
  }

  public CustomRoadAttributeScenario addRoadsToBeAttributedItem(RoadsToBeAttributed roadsToBeAttributedItem) {
    if (this.roadsToBeAttributed == null) {
      this.roadsToBeAttributed = new ArrayList<>();
    }
    this.roadsToBeAttributed.add(roadsToBeAttributedItem);
    return this;
  }

  /**
   * A collection of roads and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item.
   * @return roadsToBeAttributed
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROADS_TO_BE_ATTRIBUTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<RoadsToBeAttributed> getRoadsToBeAttributed() {
    return roadsToBeAttributed;
  }


  @JsonProperty(JSON_PROPERTY_ROADS_TO_BE_ATTRIBUTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoadsToBeAttributed(List<RoadsToBeAttributed> roadsToBeAttributed) {
    this.roadsToBeAttributed = roadsToBeAttributed;
  }


  public CustomRoadAttributeScenario combinedTransportsToBeAttributed(List<CombinedTransportToBeAttributed> combinedTransportsToBeAttributed) {
    this.combinedTransportsToBeAttributed = combinedTransportsToBeAttributed;
    return this;
  }

  public CustomRoadAttributeScenario addCombinedTransportsToBeAttributedItem(CombinedTransportToBeAttributed combinedTransportsToBeAttributedItem) {
    if (this.combinedTransportsToBeAttributed == null) {
      this.combinedTransportsToBeAttributed = new ArrayList<>();
    }
    this.combinedTransportsToBeAttributed.add(combinedTransportsToBeAttributedItem);
    return this;
  }

  /**
   * A collection of combined transports and attributes to be assigned. The accumulated number of roads and combined transports from all selectors must not exceed 25000. Both parameters **roadsToBeAttributed** and **combinedTransportsToBeAttributed** can be specified.  One of them must contain at least one item.
   * @return combinedTransportsToBeAttributed
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMBINED_TRANSPORTS_TO_BE_ATTRIBUTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<CombinedTransportToBeAttributed> getCombinedTransportsToBeAttributed() {
    return combinedTransportsToBeAttributed;
  }


  @JsonProperty(JSON_PROPERTY_COMBINED_TRANSPORTS_TO_BE_ATTRIBUTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCombinedTransportsToBeAttributed(List<CombinedTransportToBeAttributed> combinedTransportsToBeAttributed) {
    this.combinedTransportsToBeAttributed = combinedTransportsToBeAttributed;
  }


  public CustomRoadAttributeScenario shared(Boolean shared) {
    this.shared = shared;
    return this;
  }

  /**
   * If true, this custom road attribute scenario can be used by every user by its ID. Other users than the owner cannot modify or delete it nor will it be listed with **getAllCustomRoadAttributeScenarios**.
   * @return shared
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getShared() {
    return shared;
  }


  @JsonProperty(JSON_PROPERTY_SHARED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setShared(Boolean shared) {
    this.shared = shared;
  }


  public CustomRoadAttributeScenario active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * If false, this custom road attribute scenario will be marked inactive and not used for subsequent route calculations until set active again. This is useful to ignore the scenario without deleting its contents.
   * @return active
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public CustomRoadAttributeScenario revision(Integer revision) {
    this.revision = revision;
    return this;
  }

  /**
   * The revision number of the custom road attribute scenario which will automatically be maintained by the server. In responses it will contain the number of updates of this specific scenario. When creating a scenario, it will be ignored. When updating a scenario, pass the number which you got from the server in the corresponding get request to make sure that the scenario has not been changed in the meantime. The server will reject updates for which the revision number does not match the revision stored in the database. When left empty in an update request, any changes will be overwritten.
   * minimum: 0
   * @return revision
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getRevision() {
    return revision;
  }


  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevision(Integer revision) {
    this.revision = revision;
  }


  /**
   * Return true if this CustomRoadAttributeScenario object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomRoadAttributeScenario customRoadAttributeScenario = (CustomRoadAttributeScenario) o;
    return Objects.equals(this.id, customRoadAttributeScenario.id) &&
        Objects.equals(this.name, customRoadAttributeScenario.name) &&
        Objects.equals(this.description, customRoadAttributeScenario.description) &&
        Objects.equals(this.roadsToBeAttributed, customRoadAttributeScenario.roadsToBeAttributed) &&
        Objects.equals(this.combinedTransportsToBeAttributed, customRoadAttributeScenario.combinedTransportsToBeAttributed) &&
        Objects.equals(this.shared, customRoadAttributeScenario.shared) &&
        Objects.equals(this.active, customRoadAttributeScenario.active) &&
        Objects.equals(this.revision, customRoadAttributeScenario.revision);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, roadsToBeAttributed, combinedTransportsToBeAttributed, shared, active, revision);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomRoadAttributeScenario {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    roadsToBeAttributed: ").append(toIndentedString(roadsToBeAttributed)).append("\n");
    sb.append("    combinedTransportsToBeAttributed: ").append(toIndentedString(combinedTransportsToBeAttributed)).append("\n");
    sb.append("    shared: ").append(toIndentedString(shared)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `description` to the URL query string
    if (getDescription() != null) {
      joiner.add(String.format("%sdescription%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDescription()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `roadsToBeAttributed` to the URL query string
    if (getRoadsToBeAttributed() != null) {
      for (int i = 0; i < getRoadsToBeAttributed().size(); i++) {
        if (getRoadsToBeAttributed().get(i) != null) {
          joiner.add(getRoadsToBeAttributed().get(i).toUrlQueryString(String.format("%sroadsToBeAttributed%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `combinedTransportsToBeAttributed` to the URL query string
    if (getCombinedTransportsToBeAttributed() != null) {
      for (int i = 0; i < getCombinedTransportsToBeAttributed().size(); i++) {
        if (getCombinedTransportsToBeAttributed().get(i) != null) {
          joiner.add(getCombinedTransportsToBeAttributed().get(i).toUrlQueryString(String.format("%scombinedTransportsToBeAttributed%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `shared` to the URL query string
    if (getShared() != null) {
      joiner.add(String.format("%sshared%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getShared()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `active` to the URL query string
    if (getActive() != null) {
      joiner.add(String.format("%sactive%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getActive()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `revision` to the URL query string
    if (getRevision() != null) {
      joiner.add(String.format("%srevision%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getRevision()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

