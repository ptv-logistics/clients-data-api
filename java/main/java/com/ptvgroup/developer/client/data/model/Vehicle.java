/*
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.data.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.data.model.ElectricityType;
import com.ptvgroup.developer.client.data.model.EmissionStandard;
import com.ptvgroup.developer.client.data.model.EngineType;
import com.ptvgroup.developer.client.data.model.EtcSubscriptionTypes;
import com.ptvgroup.developer.client.data.model.FuelType;
import com.ptvgroup.developer.client.data.model.HazardousMaterials;
import com.ptvgroup.developer.client.data.model.LowEmissionZoneTypes;
import com.ptvgroup.developer.client.data.model.ParticleReductionClass;
import com.ptvgroup.developer.client.data.model.TruckRoutes;
import com.ptvgroup.developer.client.data.model.TunnelRestrictionCode;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.data.ApiClient;
/**
 * Physical and legal properties of the vehicle such as its dimensions.  These parameters are not supported for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. Unsupported parameters such as **electricityType** for combustion vehicles will not be present in the response.
 */
@JsonPropertyOrder({
  Vehicle.JSON_PROPERTY_ENGINE_TYPE,
  Vehicle.JSON_PROPERTY_FUEL_TYPE,
  Vehicle.JSON_PROPERTY_ELECTRICITY_TYPE,
  Vehicle.JSON_PROPERTY_AVERAGE_FUEL_CONSUMPTION,
  Vehicle.JSON_PROPERTY_AVERAGE_ELECTRICITY_CONSUMPTION,
  Vehicle.JSON_PROPERTY_BIO_FUEL_RATIO,
  Vehicle.JSON_PROPERTY_HYBRID_RATIO,
  Vehicle.JSON_PROPERTY_DUAL_FUEL_RATIO,
  Vehicle.JSON_PROPERTY_CYLINDER_CAPACITY,
  Vehicle.JSON_PROPERTY_EMISSION_STANDARD,
  Vehicle.JSON_PROPERTY_CO2_EMISSION_CLASS,
  Vehicle.JSON_PROPERTY_LOW_EMISSION_ZONE_TYPES,
  Vehicle.JSON_PROPERTY_LOW_EMISSION_ZONE_APPROVALS,
  Vehicle.JSON_PROPERTY_LOW_EMISSION_ZONE_EXEMPTIONS,
  Vehicle.JSON_PROPERTY_PARTICLE_REDUCTION_CLASS,
  Vehicle.JSON_PROPERTY_EMPTY_WEIGHT,
  Vehicle.JSON_PROPERTY_LOAD_WEIGHT,
  Vehicle.JSON_PROPERTY_TOTAL_PERMITTED_WEIGHT,
  Vehicle.JSON_PROPERTY_TOTAL_TECHNICALLY_PERMITTED_WEIGHT,
  Vehicle.JSON_PROPERTY_AXLE_WEIGHT,
  Vehicle.JSON_PROPERTY_NUMBER_OF_AXLES,
  Vehicle.JSON_PROPERTY_NUMBER_OF_TIRES,
  Vehicle.JSON_PROPERTY_HEIGHT,
  Vehicle.JSON_PROPERTY_HEIGHT_ABOVE_FRONT_AXLE,
  Vehicle.JSON_PROPERTY_LENGTH,
  Vehicle.JSON_PROPERTY_WIDTH,
  Vehicle.JSON_PROPERTY_HAZARDOUS_MATERIALS,
  Vehicle.JSON_PROPERTY_TUNNEL_RESTRICTION_CODE,
  Vehicle.JSON_PROPERTY_TRUCK_ROUTES,
  Vehicle.JSON_PROPERTY_COMMERCIAL,
  Vehicle.JSON_PROPERTY_ETC_SUBSCRIPTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-29T11:47:47.660663945Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class Vehicle {
  public static final String JSON_PROPERTY_ENGINE_TYPE = "engineType";
  private EngineType engineType;

  public static final String JSON_PROPERTY_FUEL_TYPE = "fuelType";
  private FuelType fuelType;

  public static final String JSON_PROPERTY_ELECTRICITY_TYPE = "electricityType";
  private ElectricityType electricityType;

  public static final String JSON_PROPERTY_AVERAGE_FUEL_CONSUMPTION = "averageFuelConsumption";
  private Double averageFuelConsumption;

  public static final String JSON_PROPERTY_AVERAGE_ELECTRICITY_CONSUMPTION = "averageElectricityConsumption";
  private Double averageElectricityConsumption;

  public static final String JSON_PROPERTY_BIO_FUEL_RATIO = "bioFuelRatio";
  private Integer bioFuelRatio;

  public static final String JSON_PROPERTY_HYBRID_RATIO = "hybridRatio";
  private Integer hybridRatio;

  public static final String JSON_PROPERTY_DUAL_FUEL_RATIO = "dualFuelRatio";
  private Integer dualFuelRatio;

  public static final String JSON_PROPERTY_CYLINDER_CAPACITY = "cylinderCapacity";
  private Integer cylinderCapacity;

  public static final String JSON_PROPERTY_EMISSION_STANDARD = "emissionStandard";
  private EmissionStandard emissionStandard;

  public static final String JSON_PROPERTY_CO2_EMISSION_CLASS = "co2EmissionClass";
  private Integer co2EmissionClass;

  public static final String JSON_PROPERTY_LOW_EMISSION_ZONE_TYPES = "lowEmissionZoneTypes";
  private List<LowEmissionZoneTypes> lowEmissionZoneTypes = new ArrayList<>();

  public static final String JSON_PROPERTY_LOW_EMISSION_ZONE_APPROVALS = "lowEmissionZoneApprovals";
  private List<String> lowEmissionZoneApprovals = new ArrayList<>();

  public static final String JSON_PROPERTY_LOW_EMISSION_ZONE_EXEMPTIONS = "lowEmissionZoneExemptions";
  private List<String> lowEmissionZoneExemptions = new ArrayList<>();

  public static final String JSON_PROPERTY_PARTICLE_REDUCTION_CLASS = "particleReductionClass";
  private ParticleReductionClass particleReductionClass;

  public static final String JSON_PROPERTY_EMPTY_WEIGHT = "emptyWeight";
  private Integer emptyWeight;

  public static final String JSON_PROPERTY_LOAD_WEIGHT = "loadWeight";
  private Integer loadWeight;

  public static final String JSON_PROPERTY_TOTAL_PERMITTED_WEIGHT = "totalPermittedWeight";
  private Integer totalPermittedWeight;

  public static final String JSON_PROPERTY_TOTAL_TECHNICALLY_PERMITTED_WEIGHT = "totalTechnicallyPermittedWeight";
  private Integer totalTechnicallyPermittedWeight;

  public static final String JSON_PROPERTY_AXLE_WEIGHT = "axleWeight";
  private Integer axleWeight;

  public static final String JSON_PROPERTY_NUMBER_OF_AXLES = "numberOfAxles";
  private Integer numberOfAxles;

  public static final String JSON_PROPERTY_NUMBER_OF_TIRES = "numberOfTires";
  private Integer numberOfTires;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private Integer height;

  public static final String JSON_PROPERTY_HEIGHT_ABOVE_FRONT_AXLE = "heightAboveFrontAxle";
  private Integer heightAboveFrontAxle;

  public static final String JSON_PROPERTY_LENGTH = "length";
  private Integer length;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private Integer width;

  public static final String JSON_PROPERTY_HAZARDOUS_MATERIALS = "hazardousMaterials";
  private List<HazardousMaterials> hazardousMaterials = new ArrayList<>();

  public static final String JSON_PROPERTY_TUNNEL_RESTRICTION_CODE = "tunnelRestrictionCode";
  private TunnelRestrictionCode tunnelRestrictionCode;

  public static final String JSON_PROPERTY_TRUCK_ROUTES = "truckRoutes";
  private List<TruckRoutes> truckRoutes = new ArrayList<>();

  public static final String JSON_PROPERTY_COMMERCIAL = "commercial";
  private Boolean commercial;

  public static final String JSON_PROPERTY_ETC_SUBSCRIPTIONS = "etcSubscriptions";
  private List<EtcSubscriptionTypes> etcSubscriptions = new ArrayList<>();

  public Vehicle() { 
  }

  public Vehicle engineType(EngineType engineType) {
    this.engineType = engineType;
    return this;
  }

  /**
   * Get engineType
   * @return engineType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENGINE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public EngineType getEngineType() {
    return engineType;
  }


  @JsonProperty(JSON_PROPERTY_ENGINE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEngineType(EngineType engineType) {
    this.engineType = engineType;
  }


  public Vehicle fuelType(FuelType fuelType) {
    this.fuelType = fuelType;
    return this;
  }

  /**
   * Get fuelType
   * @return fuelType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUEL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public FuelType getFuelType() {
    return fuelType;
  }


  @JsonProperty(JSON_PROPERTY_FUEL_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFuelType(FuelType fuelType) {
    this.fuelType = fuelType;
  }


  public Vehicle electricityType(ElectricityType electricityType) {
    this.electricityType = electricityType;
    return this;
  }

  /**
   * Get electricityType
   * @return electricityType
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ELECTRICITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ElectricityType getElectricityType() {
    return electricityType;
  }


  @JsonProperty(JSON_PROPERTY_ELECTRICITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setElectricityType(ElectricityType electricityType) {
    this.electricityType = electricityType;
  }


  public Vehicle averageFuelConsumption(Double averageFuelConsumption) {
    this.averageFuelConsumption = averageFuelConsumption;
    return this;
  }

  /**
   * The average fuel consumption of the vehicle. Depending on the **fuelType** [l/100km] for liquid fuel types or [kg/100km] for gaseous fuel types.  Supported for **engineType** _COMBUSTION_  or _HYBRID_. Relevant for &#x60;emissions&#x60;. 
   * minimum: 0
   * @return averageFuelConsumption
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_FUEL_CONSUMPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getAverageFuelConsumption() {
    return averageFuelConsumption;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_FUEL_CONSUMPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageFuelConsumption(Double averageFuelConsumption) {
    this.averageFuelConsumption = averageFuelConsumption;
  }


  public Vehicle averageElectricityConsumption(Double averageElectricityConsumption) {
    this.averageElectricityConsumption = averageElectricityConsumption;
    return this;
  }

  /**
   * The average electricity consumption of the vehicle [kWh/100km].  Supported for **engineType** _ELECTRIC_ or _HYBRID_. Relevant for &#x60;emissions&#x60;. 
   * minimum: 0
   * @return averageElectricityConsumption
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_ELECTRICITY_CONSUMPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getAverageElectricityConsumption() {
    return averageElectricityConsumption;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_ELECTRICITY_CONSUMPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageElectricityConsumption(Double averageElectricityConsumption) {
    this.averageElectricityConsumption = averageElectricityConsumption;
  }


  public Vehicle bioFuelRatio(Integer bioFuelRatio) {
    this.bioFuelRatio = bioFuelRatio;
    return this;
  }

  /**
   * The ratio of biofuel to conventional fuel [%], i.e. 10 for E10 with 10% biofuel.  Supported for **engineType** _COMBUSTION_ or _HYBRID_ and only for the fuel types _GASOLINE_, _DIESEL_, _CNG_GASOLINE_ and _LNG_GASOLINE_. Relevant for &#x60;emissions&#x60;. 
   * minimum: 0
   * maximum: 100
   * @return bioFuelRatio
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BIO_FUEL_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getBioFuelRatio() {
    return bioFuelRatio;
  }


  @JsonProperty(JSON_PROPERTY_BIO_FUEL_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBioFuelRatio(Integer bioFuelRatio) {
    this.bioFuelRatio = bioFuelRatio;
  }


  public Vehicle hybridRatio(Integer hybridRatio) {
    this.hybridRatio = hybridRatio;
    return this;
  }

  /**
   * Electric energy usage ratio from the total amount of energy consumed by the vehicle.  Supported for **engineType** _HYBRID_. Relevant for &#x60;emissions&#x60;. 
   * minimum: 1
   * maximum: 99
   * @return hybridRatio
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HYBRID_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHybridRatio() {
    return hybridRatio;
  }


  @JsonProperty(JSON_PROPERTY_HYBRID_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHybridRatio(Integer hybridRatio) {
    this.hybridRatio = hybridRatio;
  }


  public Vehicle dualFuelRatio(Integer dualFuelRatio) {
    this.dualFuelRatio = dualFuelRatio;
    return this;
  }

  /**
   * Ratio of CNG or LPG usage from the total amount of fuel consumption.  Supported for **engineType** _COMBUSTION_ with **fuelType**  _CNG_GASOLINE_ or _LPG_GASOLINE_. Relevant for &#x60;emissions&#x60;. 
   * minimum: 1
   * maximum: 99
   * @return dualFuelRatio
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUAL_FUEL_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getDualFuelRatio() {
    return dualFuelRatio;
  }


  @JsonProperty(JSON_PROPERTY_DUAL_FUEL_RATIO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDualFuelRatio(Integer dualFuelRatio) {
    this.dualFuelRatio = dualFuelRatio;
  }


  public Vehicle cylinderCapacity(Integer cylinderCapacity) {
    this.cylinderCapacity = cylinderCapacity;
    return this;
  }

  /**
   * The cylinder capacity of the vehicle [cm&amp;#x00B3;].  Supported for **engineType** _COMBUSTION_ or _HYBRID_. 
   * minimum: 1
   * @return cylinderCapacity
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CYLINDER_CAPACITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCylinderCapacity() {
    return cylinderCapacity;
  }


  @JsonProperty(JSON_PROPERTY_CYLINDER_CAPACITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCylinderCapacity(Integer cylinderCapacity) {
    this.cylinderCapacity = cylinderCapacity;
  }


  public Vehicle emissionStandard(EmissionStandard emissionStandard) {
    this.emissionStandard = emissionStandard;
    return this;
  }

  /**
   * Get emissionStandard
   * @return emissionStandard
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMISSION_STANDARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public EmissionStandard getEmissionStandard() {
    return emissionStandard;
  }


  @JsonProperty(JSON_PROPERTY_EMISSION_STANDARD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmissionStandard(EmissionStandard emissionStandard) {
    this.emissionStandard = emissionStandard;
  }


  public Vehicle co2EmissionClass(Integer co2EmissionClass) {
    this.co2EmissionClass = co2EmissionClass;
    return this;
  }

  /**
   * The CO&amp;#8322; emission class valid in the European Union. See also the  [Directive 1999/62/EC](https://eur-lex.europa.eu/eli/dir/1999/62/2022-03-24) of the European Parliament and  of the Council on the charging of heavy goods vehicles for the use of certain infrastructures, Article 7ga.  Relevant for &#x60;toll&#x60;. 
   * minimum: 1
   * maximum: 5
   * @return co2EmissionClass
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CO2_EMISSION_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getCo2EmissionClass() {
    return co2EmissionClass;
  }


  @JsonProperty(JSON_PROPERTY_CO2_EMISSION_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCo2EmissionClass(Integer co2EmissionClass) {
    this.co2EmissionClass = co2EmissionClass;
  }


  public Vehicle lowEmissionZoneTypes(List<LowEmissionZoneTypes> lowEmissionZoneTypes) {
    this.lowEmissionZoneTypes = lowEmissionZoneTypes;
    return this;
  }

  public Vehicle addLowEmissionZoneTypesItem(LowEmissionZoneTypes lowEmissionZoneTypesItem) {
    if (this.lowEmissionZoneTypes == null) {
      this.lowEmissionZoneTypes = new ArrayList<>();
    }
    this.lowEmissionZoneTypes.add(lowEmissionZoneTypesItem);
    return this;
  }

  /**
   * Comma-separated list of the low-emission zone types of the vehicle. This parameter is deprecated and superseded by **lowEmissionZoneApprovals**.  Relevant for &#x60;routing&#x60;. 
   * @return lowEmissionZoneTypes
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<LowEmissionZoneTypes> getLowEmissionZoneTypes() {
    return lowEmissionZoneTypes;
  }


  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONE_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowEmissionZoneTypes(List<LowEmissionZoneTypes> lowEmissionZoneTypes) {
    this.lowEmissionZoneTypes = lowEmissionZoneTypes;
  }


  public Vehicle lowEmissionZoneApprovals(List<String> lowEmissionZoneApprovals) {
    this.lowEmissionZoneApprovals = lowEmissionZoneApprovals;
    return this;
  }

  public Vehicle addLowEmissionZoneApprovalsItem(String lowEmissionZoneApprovalsItem) {
    if (this.lowEmissionZoneApprovals == null) {
      this.lowEmissionZoneApprovals = new ArrayList<>();
    }
    this.lowEmissionZoneApprovals.add(lowEmissionZoneApprovalsItem);
    return this;
  }

  /**
   * Comma-separated list of approvals to enter low-emission zones. Usually, such approvals are environmental badges to be placed on the windscreen, but that can also be any other kind of approval or vehicle registration allowing it to enter a low-emission zone.  Low-emission zones which do not need any kind of approval but depend only on the **emissionStandard** are not affected by this parameter. Instead they can be entered if the **emissionStandard**  is sufficient. Electric vehicles can always enter these zones.  Available values are provided by type &#x60;LowEmissionZoneApprovals&#x60;. \&quot;NONE\&quot; \&quot;AT_EURO_1\&quot; \&quot;AT_EURO_2\&quot; \&quot;AT_EURO_3\&quot; \&quot;AT_EURO_4\&quot; \&quot;AT_EURO_5\&quot; \&quot;AT_EURO_6\&quot; \&quot;DE_GREEN\&quot; \&quot;DE_YELLOW\&quot; \&quot;DE_RED\&quot; \&quot;DK_AUTHORIZED\&quot; \&quot;ES_CAT_B\&quot; \&quot;ES_CAT_C\&quot; \&quot;ES_CAT_ECO\&quot; \&quot;ES_CAT_ZERO\&quot; \&quot;FR_CRITAIR_0\&quot; \&quot;FR_CRITAIR_1\&quot; \&quot;FR_CRITAIR_2\&quot; \&quot;FR_CRITAIR_3\&quot; \&quot;FR_CRITAIR_4\&quot; \&quot;FR_CRITAIR_5\&quot;  This list can be extended at any time, clients should handle unknown values properly. Relevant for &#x60;routing&#x60;. See [here](../routing-api/concepts/low-emission-zones) for more information. 
   * @return lowEmissionZoneApprovals
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONE_APPROVALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getLowEmissionZoneApprovals() {
    return lowEmissionZoneApprovals;
  }


  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONE_APPROVALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowEmissionZoneApprovals(List<String> lowEmissionZoneApprovals) {
    this.lowEmissionZoneApprovals = lowEmissionZoneApprovals;
  }


  public Vehicle lowEmissionZoneExemptions(List<String> lowEmissionZoneExemptions) {
    this.lowEmissionZoneExemptions = lowEmissionZoneExemptions;
    return this;
  }

  public Vehicle addLowEmissionZoneExemptionsItem(String lowEmissionZoneExemptionsItem) {
    if (this.lowEmissionZoneExemptions == null) {
      this.lowEmissionZoneExemptions = new ArrayList<>();
    }
    this.lowEmissionZoneExemptions.add(lowEmissionZoneExemptionsItem);
    return this;
  }

  /**
   * Comma-separated list of exemptions to enter low-emission zones.  Available values are provided by type &#x60;LowEmissionZoneExemptions&#x60;: \&quot;BE_LAGE_EMISSIEZONE_ANTWERPEN\&quot; \&quot;BE_LAGE_EMISSIEZONE_GENT\&quot; \&quot;BE_ZONE_BASSE_EMISSION_BRUXELLES\&quot; \&quot;DK_AALBORG_MILJOZONE\&quot; \&quot;DK_ARHUS_MILJOZONE\&quot; \&quot;DK_FREDERIKSBERG_MILJOZONE\&quot; \&quot;DK_KOBENHAVN_MILJOZONE\&quot; \&quot;DK_ODENSE_MILJOZONE\&quot; \&quot;ES_ZBE_ALMERIA\&quot; \&quot;ES_ZBE_BILBAO\&quot; \&quot;ES_ZBE_CORDOBA\&quot; \&quot;ES_ZBE_SAN_SEBASTIAN\&quot; \&quot;ES_ZBE_TORREMOLINOS\&quot; \&quot;ES_ZBE_VALLADOLID\&quot; \&quot;FR_STRASBOURG_ZFE\&quot; \&quot;GB_ABERDEEN_LEZ\&quot; \&quot;GB_BATH_CAZ\&quot; \&quot;GB_BIRMINGHAM_CAZ\&quot; \&quot;GB_BRADFORD_CAZ\&quot; \&quot;GB_BRISTOL_CAZ\&quot; \&quot;GB_DUNDEE_LEZ\&quot; \&quot;GB_EDINBURGH_LEZ\&quot; \&quot;GB_GLASGOW_LEZ\&quot; \&quot;GB_LONDON_ULTRA_LOW_EMISSION_ZONE\&quot; \&quot;GB_NEWCASTLE_CAZ\&quot; \&quot;GB_PORTSMOUTH_CAZ\&quot; \&quot;GB_SHEFFIELD_CAZ\&quot; \&quot;IT_MILANO_AREA_C\&quot; \&quot;IT_PALERMO_ZTL\&quot; \&quot;NL_AMSTERDAM_MILIEUZONE\&quot; \&quot;NL_AMSTERDAM_ZERO_EMISSIEZONE\&quot; \&quot;NL_ARNHEM_MILIEUZONE\&quot; \&quot;NL_ASSEN_ZERO_EMISSIEZONE\&quot; \&quot;NL_BREDA_MILIEUZONE\&quot; \&quot;NL_DELFT_HAAG_ZERO_EMISSIEZONE\&quot; \&quot;NL_DELFT_MILIEUZONE\&quot; \&quot;NL_DEN_HAAG_MILIEUZONE\&quot; \&quot;NL_DEN_HAAG_ZERO_EMISSIEZONE\&quot; \&quot;NL_EINDHOVEN_MILIEUZONE\&quot; \&quot;NL_EINDHOVEN_ZERO_EMISSIEZONE\&quot; \&quot;NL_GOUDA_ZERO_EMISSIEZONE\&quot; \&quot;NL_HAARLEM_MILIEUZONE\&quot; \&quot;NL_LEIDEN_MILIEUZONE\&quot; \&quot;NL_LEIDEN_ZERO_EMISSIEZONE\&quot; \&quot;NL_MAASTRICHT_MILIEUZONE\&quot; \&quot;NL_MAASTRICHT_ZERO_EMISSIEZONE\&quot; \&quot;NL_MAASVLAKTE_ROTTERDAM_MILIEUZONE\&quot; \&quot;NL_NIJMEGEN_ZERO_EMISSIEZONE\&quot; \&quot;NL_RIJSWIJK_MILIEUZONE\&quot; \&quot;NL_ROTTERDAM_MILIEUZONE\&quot; \&quot;NL_ROTTERDAM_ZERO_EMISSIEZONE\&quot; \&quot;NL_S_GRAVENDIJKWAL_MILIEUZONE\&quot; \&quot;NL_S_HERTOGENBOSCH_MILIEUZONE\&quot; \&quot;NL_TILBURG_MILIEUZONE\&quot; \&quot;NL_TILBURG_ZERO_EMISSIEZONE\&quot; \&quot;NL_UTRECHT_MILIEUZONE\&quot; \&quot;NL_UTRECHT_ZERO_EMISSIEZONE\&quot; \&quot;NL_ZWOLLE_ZERO_EMISSIEZONE\&quot;  This list can be extended at any time, clients should handle unknown values properly. Relevant for &#x60;routing&#x60;. See [here](../routing-api/concepts/low-emission-zones) for more information. 
   * @return lowEmissionZoneExemptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONE_EXEMPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getLowEmissionZoneExemptions() {
    return lowEmissionZoneExemptions;
  }


  @JsonProperty(JSON_PROPERTY_LOW_EMISSION_ZONE_EXEMPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowEmissionZoneExemptions(List<String> lowEmissionZoneExemptions) {
    this.lowEmissionZoneExemptions = lowEmissionZoneExemptions;
  }


  public Vehicle particleReductionClass(ParticleReductionClass particleReductionClass) {
    this.particleReductionClass = particleReductionClass;
    return this;
  }

  /**
   * Get particleReductionClass
   * @return particleReductionClass
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARTICLE_REDUCTION_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ParticleReductionClass getParticleReductionClass() {
    return particleReductionClass;
  }


  @JsonProperty(JSON_PROPERTY_PARTICLE_REDUCTION_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParticleReductionClass(ParticleReductionClass particleReductionClass) {
    this.particleReductionClass = particleReductionClass;
  }


  public Vehicle emptyWeight(Integer emptyWeight) {
    this.emptyWeight = emptyWeight;
    return this;
  }

  /**
   * The empty weight of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;. 
   * minimum: 1
   * @return emptyWeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMPTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getEmptyWeight() {
    return emptyWeight;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmptyWeight(Integer emptyWeight) {
    this.emptyWeight = emptyWeight;
  }


  public Vehicle loadWeight(Integer loadWeight) {
    this.loadWeight = loadWeight;
    return this;
  }

  /**
   * The weight of the vehicle&#39;s load [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;. 
   * minimum: 0
   * @return loadWeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOAD_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getLoadWeight() {
    return loadWeight;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadWeight(Integer loadWeight) {
    this.loadWeight = loadWeight;
  }


  public Vehicle totalPermittedWeight(Integer totalPermittedWeight) {
    this.totalPermittedWeight = totalPermittedWeight;
    return this;
  }

  /**
   * The total permitted weight of the vehicle and its load [kg]. This is the weight the vehicle is usually registered with.  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;, &#x60;emissions&#x60;. 
   * minimum: 1
   * @return totalPermittedWeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_PERMITTED_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTotalPermittedWeight() {
    return totalPermittedWeight;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_PERMITTED_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalPermittedWeight(Integer totalPermittedWeight) {
    this.totalPermittedWeight = totalPermittedWeight;
  }


  public Vehicle totalTechnicallyPermittedWeight(Integer totalTechnicallyPermittedWeight) {
    this.totalTechnicallyPermittedWeight = totalTechnicallyPermittedWeight;
    return this;
  }

  /**
   * The total technically permitted weight of the vehicle and its load [kg].  Sometimes vehicles are registered with a smaller **totalPermittedWeight** than technically possible. For  such cases the possibly larger total technically permitted weight is specified here, it is relevant for  toll calculation in some European countries.  Relevant for &#x60;toll&#x60;. 
   * minimum: 1
   * @return totalTechnicallyPermittedWeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_TECHNICALLY_PERMITTED_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getTotalTechnicallyPermittedWeight() {
    return totalTechnicallyPermittedWeight;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_TECHNICALLY_PERMITTED_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalTechnicallyPermittedWeight(Integer totalTechnicallyPermittedWeight) {
    this.totalTechnicallyPermittedWeight = totalTechnicallyPermittedWeight;
  }


  public Vehicle axleWeight(Integer axleWeight) {
    this.axleWeight = axleWeight;
    return this;
  }

  /**
   * The maximum distributed weight that may be supported by an axle of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
   * minimum: 1
   * @return axleWeight
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AXLE_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getAxleWeight() {
    return axleWeight;
  }


  @JsonProperty(JSON_PROPERTY_AXLE_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAxleWeight(Integer axleWeight) {
    this.axleWeight = axleWeight;
  }


  public Vehicle numberOfAxles(Integer numberOfAxles) {
    this.numberOfAxles = numberOfAxles;
    return this;
  }

  /**
   * The total number of axles of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. 
   * minimum: 1
   * @return numberOfAxles
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_AXLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNumberOfAxles() {
    return numberOfAxles;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_AXLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfAxles(Integer numberOfAxles) {
    this.numberOfAxles = numberOfAxles;
  }


  public Vehicle numberOfTires(Integer numberOfTires) {
    this.numberOfTires = numberOfTires;
    return this;
  }

  /**
   * The total number of tires of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. 
   * minimum: 1
   * @return numberOfTires
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_TIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNumberOfTires() {
    return numberOfTires;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_TIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfTires(Integer numberOfTires) {
    this.numberOfTires = numberOfTires;
  }


  public Vehicle height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * The height of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
   * minimum: 1
   * @return height
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(Integer height) {
    this.height = height;
  }


  public Vehicle heightAboveFrontAxle(Integer heightAboveFrontAxle) {
    this.heightAboveFrontAxle = heightAboveFrontAxle;
    return this;
  }

  /**
   * The height above the front axle [cm].  Relevant for &#x60;toll&#x60;. 
   * minimum: 1
   * @return heightAboveFrontAxle
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT_ABOVE_FRONT_AXLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getHeightAboveFrontAxle() {
    return heightAboveFrontAxle;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT_ABOVE_FRONT_AXLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeightAboveFrontAxle(Integer heightAboveFrontAxle) {
    this.heightAboveFrontAxle = heightAboveFrontAxle;
  }


  public Vehicle length(Integer length) {
    this.length = length;
    return this;
  }

  /**
   * The length of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
   * minimum: 1
   * @return length
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getLength() {
    return length;
  }


  @JsonProperty(JSON_PROPERTY_LENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLength(Integer length) {
    this.length = length;
  }


  public Vehicle width(Integer width) {
    this.width = width;
    return this;
  }

  /**
   * The width of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
   * minimum: 1
   * @return width
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(Integer width) {
    this.width = width;
  }


  public Vehicle hazardousMaterials(List<HazardousMaterials> hazardousMaterials) {
    this.hazardousMaterials = hazardousMaterials;
    return this;
  }

  public Vehicle addHazardousMaterialsItem(HazardousMaterials hazardousMaterialsItem) {
    if (this.hazardousMaterials == null) {
      this.hazardousMaterials = new ArrayList<>();
    }
    this.hazardousMaterials.add(hazardousMaterialsItem);
    return this;
  }

  /**
   * Comma-separated list of hazardous materials the vehicle has loaded.  Relevant for &#x60;routing&#x60;. 
   * @return hazardousMaterials
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAZARDOUS_MATERIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<HazardousMaterials> getHazardousMaterials() {
    return hazardousMaterials;
  }


  @JsonProperty(JSON_PROPERTY_HAZARDOUS_MATERIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHazardousMaterials(List<HazardousMaterials> hazardousMaterials) {
    this.hazardousMaterials = hazardousMaterials;
  }


  public Vehicle tunnelRestrictionCode(TunnelRestrictionCode tunnelRestrictionCode) {
    this.tunnelRestrictionCode = tunnelRestrictionCode;
    return this;
  }

  /**
   * Get tunnelRestrictionCode
   * @return tunnelRestrictionCode
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TUNNEL_RESTRICTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TunnelRestrictionCode getTunnelRestrictionCode() {
    return tunnelRestrictionCode;
  }


  @JsonProperty(JSON_PROPERTY_TUNNEL_RESTRICTION_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTunnelRestrictionCode(TunnelRestrictionCode tunnelRestrictionCode) {
    this.tunnelRestrictionCode = tunnelRestrictionCode;
  }


  public Vehicle truckRoutes(List<TruckRoutes> truckRoutes) {
    this.truckRoutes = truckRoutes;
    return this;
  }

  public Vehicle addTruckRoutesItem(TruckRoutes truckRoutesItem) {
    if (this.truckRoutes == null) {
      this.truckRoutes = new ArrayList<>();
    }
    this.truckRoutes.add(truckRoutesItem);
    return this;
  }

  /**
   * Comma-separated list of truck routes the vehicle has to follow. This parameter will be ignored for non-truck profiles such as EUR_CAR, EUR_VAN, USA_1_PICKUP or AUS_LCV_LIGHT_COMMERCIAL.  * &#x60;DE_LKWUEBERLSTVAUSNV&#x60;  Preferred routes for long trucks in Germany, also known as Lang-LKW.  * &#x60;NL_LZV&#x60;  Preferred routes for long trucks in the Netherlands, also known as LZV (Langere en Zwaardere Vrachtautocombinatie).  * &#x60;NZ_HPMV&#x60;  The network for High Productivity Motor Vehicles (HPMV) carrying the maximum loads available under a permit (New Zeland Transport Agency).  * &#x60;SE_BK_1&#x60;  Public roads and bridges that support up to 64 t total permitted weight (Swedish Transport Administration).  * &#x60;SE_BK_2&#x60;  Public roads and bridges that support up to 51.4 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_3&#x60;  Public roads and bridges that support up to 37.5 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_4&#x60;  Public roads and bridges that support up to 74 t total permitted weight (draft summer 2018, Swedish Transport Administration).  * &#x60;US_STAA&#x60;  Routes that belong to the highway network as defined by the Surface Transportation Assistance Act in the US.  * &#x60;US_TD&#x60;  Part of a state-designated highway network for trucks in the US.  * &#x60;AU_B_DOUBLE&#x60;  B-Double routes as defined in Australia.  * &#x60;AU_B_DOUBLE_HML&#x60;  Routes for B-Double vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_B_TRIPLE&#x60;  B-Triple routes as defined in Australia.  * &#x60;AU_B_TRIPLE_HML&#x60;  Routes for B-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE&#x60;  Routes for AB-Triple vehicle combinations operating (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE_HML&#x60;  Routes for AB-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;GENERAL_TRUCK_ROUTES&#x60;  General routes designated for trucks, for example to prevent trucks routing through city centres when they are on transit.  * &#x60;NONE&#x60;  Not used.  Relevant for &#x60;routing&#x60;. 
   * @return truckRoutes
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRUCK_ROUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<TruckRoutes> getTruckRoutes() {
    return truckRoutes;
  }


  @JsonProperty(JSON_PROPERTY_TRUCK_ROUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTruckRoutes(List<TruckRoutes> truckRoutes) {
    this.truckRoutes = truckRoutes;
  }


  public Vehicle commercial(Boolean commercial) {
    this.commercial = commercial;
    return this;
  }

  /**
   * Specifies if the vehicle usage is commercial.  Relevant for &#x60;toll&#x60;. 
   * @return commercial
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMERCIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getCommercial() {
    return commercial;
  }


  @JsonProperty(JSON_PROPERTY_COMMERCIAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommercial(Boolean commercial) {
    this.commercial = commercial;
  }


  public Vehicle etcSubscriptions(List<EtcSubscriptionTypes> etcSubscriptions) {
    this.etcSubscriptions = etcSubscriptions;
    return this;
  }

  public Vehicle addEtcSubscriptionsItem(EtcSubscriptionTypes etcSubscriptionsItem) {
    if (this.etcSubscriptions == null) {
      this.etcSubscriptions = new ArrayList<>();
    }
    this.etcSubscriptions.add(etcSubscriptionsItem);
    return this;
  }

  /**
   * A comma separated list of ETC Subscriptions. See [here](../routing-api/concepts/electronic-toll-collection) for more information on available subscriptions.  Relevant for &#x60;toll&#x60;. 
   * @return etcSubscriptions
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ETC_SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<EtcSubscriptionTypes> getEtcSubscriptions() {
    return etcSubscriptions;
  }


  @JsonProperty(JSON_PROPERTY_ETC_SUBSCRIPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEtcSubscriptions(List<EtcSubscriptionTypes> etcSubscriptions) {
    this.etcSubscriptions = etcSubscriptions;
  }


  /**
   * Return true if this Vehicle object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vehicle vehicle = (Vehicle) o;
    return Objects.equals(this.engineType, vehicle.engineType) &&
        Objects.equals(this.fuelType, vehicle.fuelType) &&
        Objects.equals(this.electricityType, vehicle.electricityType) &&
        Objects.equals(this.averageFuelConsumption, vehicle.averageFuelConsumption) &&
        Objects.equals(this.averageElectricityConsumption, vehicle.averageElectricityConsumption) &&
        Objects.equals(this.bioFuelRatio, vehicle.bioFuelRatio) &&
        Objects.equals(this.hybridRatio, vehicle.hybridRatio) &&
        Objects.equals(this.dualFuelRatio, vehicle.dualFuelRatio) &&
        Objects.equals(this.cylinderCapacity, vehicle.cylinderCapacity) &&
        Objects.equals(this.emissionStandard, vehicle.emissionStandard) &&
        Objects.equals(this.co2EmissionClass, vehicle.co2EmissionClass) &&
        Objects.equals(this.lowEmissionZoneTypes, vehicle.lowEmissionZoneTypes) &&
        Objects.equals(this.lowEmissionZoneApprovals, vehicle.lowEmissionZoneApprovals) &&
        Objects.equals(this.lowEmissionZoneExemptions, vehicle.lowEmissionZoneExemptions) &&
        Objects.equals(this.particleReductionClass, vehicle.particleReductionClass) &&
        Objects.equals(this.emptyWeight, vehicle.emptyWeight) &&
        Objects.equals(this.loadWeight, vehicle.loadWeight) &&
        Objects.equals(this.totalPermittedWeight, vehicle.totalPermittedWeight) &&
        Objects.equals(this.totalTechnicallyPermittedWeight, vehicle.totalTechnicallyPermittedWeight) &&
        Objects.equals(this.axleWeight, vehicle.axleWeight) &&
        Objects.equals(this.numberOfAxles, vehicle.numberOfAxles) &&
        Objects.equals(this.numberOfTires, vehicle.numberOfTires) &&
        Objects.equals(this.height, vehicle.height) &&
        Objects.equals(this.heightAboveFrontAxle, vehicle.heightAboveFrontAxle) &&
        Objects.equals(this.length, vehicle.length) &&
        Objects.equals(this.width, vehicle.width) &&
        Objects.equals(this.hazardousMaterials, vehicle.hazardousMaterials) &&
        Objects.equals(this.tunnelRestrictionCode, vehicle.tunnelRestrictionCode) &&
        Objects.equals(this.truckRoutes, vehicle.truckRoutes) &&
        Objects.equals(this.commercial, vehicle.commercial) &&
        Objects.equals(this.etcSubscriptions, vehicle.etcSubscriptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(engineType, fuelType, electricityType, averageFuelConsumption, averageElectricityConsumption, bioFuelRatio, hybridRatio, dualFuelRatio, cylinderCapacity, emissionStandard, co2EmissionClass, lowEmissionZoneTypes, lowEmissionZoneApprovals, lowEmissionZoneExemptions, particleReductionClass, emptyWeight, loadWeight, totalPermittedWeight, totalTechnicallyPermittedWeight, axleWeight, numberOfAxles, numberOfTires, height, heightAboveFrontAxle, length, width, hazardousMaterials, tunnelRestrictionCode, truckRoutes, commercial, etcSubscriptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vehicle {\n");
    sb.append("    engineType: ").append(toIndentedString(engineType)).append("\n");
    sb.append("    fuelType: ").append(toIndentedString(fuelType)).append("\n");
    sb.append("    electricityType: ").append(toIndentedString(electricityType)).append("\n");
    sb.append("    averageFuelConsumption: ").append(toIndentedString(averageFuelConsumption)).append("\n");
    sb.append("    averageElectricityConsumption: ").append(toIndentedString(averageElectricityConsumption)).append("\n");
    sb.append("    bioFuelRatio: ").append(toIndentedString(bioFuelRatio)).append("\n");
    sb.append("    hybridRatio: ").append(toIndentedString(hybridRatio)).append("\n");
    sb.append("    dualFuelRatio: ").append(toIndentedString(dualFuelRatio)).append("\n");
    sb.append("    cylinderCapacity: ").append(toIndentedString(cylinderCapacity)).append("\n");
    sb.append("    emissionStandard: ").append(toIndentedString(emissionStandard)).append("\n");
    sb.append("    co2EmissionClass: ").append(toIndentedString(co2EmissionClass)).append("\n");
    sb.append("    lowEmissionZoneTypes: ").append(toIndentedString(lowEmissionZoneTypes)).append("\n");
    sb.append("    lowEmissionZoneApprovals: ").append(toIndentedString(lowEmissionZoneApprovals)).append("\n");
    sb.append("    lowEmissionZoneExemptions: ").append(toIndentedString(lowEmissionZoneExemptions)).append("\n");
    sb.append("    particleReductionClass: ").append(toIndentedString(particleReductionClass)).append("\n");
    sb.append("    emptyWeight: ").append(toIndentedString(emptyWeight)).append("\n");
    sb.append("    loadWeight: ").append(toIndentedString(loadWeight)).append("\n");
    sb.append("    totalPermittedWeight: ").append(toIndentedString(totalPermittedWeight)).append("\n");
    sb.append("    totalTechnicallyPermittedWeight: ").append(toIndentedString(totalTechnicallyPermittedWeight)).append("\n");
    sb.append("    axleWeight: ").append(toIndentedString(axleWeight)).append("\n");
    sb.append("    numberOfAxles: ").append(toIndentedString(numberOfAxles)).append("\n");
    sb.append("    numberOfTires: ").append(toIndentedString(numberOfTires)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    heightAboveFrontAxle: ").append(toIndentedString(heightAboveFrontAxle)).append("\n");
    sb.append("    length: ").append(toIndentedString(length)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    hazardousMaterials: ").append(toIndentedString(hazardousMaterials)).append("\n");
    sb.append("    tunnelRestrictionCode: ").append(toIndentedString(tunnelRestrictionCode)).append("\n");
    sb.append("    truckRoutes: ").append(toIndentedString(truckRoutes)).append("\n");
    sb.append("    commercial: ").append(toIndentedString(commercial)).append("\n");
    sb.append("    etcSubscriptions: ").append(toIndentedString(etcSubscriptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `engineType` to the URL query string
    if (getEngineType() != null) {
      joiner.add(String.format("%sengineType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEngineType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `fuelType` to the URL query string
    if (getFuelType() != null) {
      joiner.add(String.format("%sfuelType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getFuelType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `electricityType` to the URL query string
    if (getElectricityType() != null) {
      joiner.add(String.format("%selectricityType%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getElectricityType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `averageFuelConsumption` to the URL query string
    if (getAverageFuelConsumption() != null) {
      joiner.add(String.format("%saverageFuelConsumption%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAverageFuelConsumption()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `averageElectricityConsumption` to the URL query string
    if (getAverageElectricityConsumption() != null) {
      joiner.add(String.format("%saverageElectricityConsumption%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAverageElectricityConsumption()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `bioFuelRatio` to the URL query string
    if (getBioFuelRatio() != null) {
      joiner.add(String.format("%sbioFuelRatio%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getBioFuelRatio()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hybridRatio` to the URL query string
    if (getHybridRatio() != null) {
      joiner.add(String.format("%shybridRatio%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHybridRatio()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `dualFuelRatio` to the URL query string
    if (getDualFuelRatio() != null) {
      joiner.add(String.format("%sdualFuelRatio%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDualFuelRatio()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cylinderCapacity` to the URL query string
    if (getCylinderCapacity() != null) {
      joiner.add(String.format("%scylinderCapacity%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCylinderCapacity()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `emissionStandard` to the URL query string
    if (getEmissionStandard() != null) {
      joiner.add(String.format("%semissionStandard%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEmissionStandard()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `co2EmissionClass` to the URL query string
    if (getCo2EmissionClass() != null) {
      joiner.add(String.format("%sco2EmissionClass%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCo2EmissionClass()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `lowEmissionZoneTypes` to the URL query string
    if (getLowEmissionZoneTypes() != null) {
      for (int i = 0; i < getLowEmissionZoneTypes().size(); i++) {
        if (getLowEmissionZoneTypes().get(i) != null) {
          joiner.add(String.format("%slowEmissionZoneTypes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getLowEmissionZoneTypes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `lowEmissionZoneApprovals` to the URL query string
    if (getLowEmissionZoneApprovals() != null) {
      for (int i = 0; i < getLowEmissionZoneApprovals().size(); i++) {
        joiner.add(String.format("%slowEmissionZoneApprovals%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getLowEmissionZoneApprovals().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `lowEmissionZoneExemptions` to the URL query string
    if (getLowEmissionZoneExemptions() != null) {
      for (int i = 0; i < getLowEmissionZoneExemptions().size(); i++) {
        joiner.add(String.format("%slowEmissionZoneExemptions%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getLowEmissionZoneExemptions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `particleReductionClass` to the URL query string
    if (getParticleReductionClass() != null) {
      joiner.add(String.format("%sparticleReductionClass%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getParticleReductionClass()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `emptyWeight` to the URL query string
    if (getEmptyWeight() != null) {
      joiner.add(String.format("%semptyWeight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEmptyWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `loadWeight` to the URL query string
    if (getLoadWeight() != null) {
      joiner.add(String.format("%sloadWeight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLoadWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `totalPermittedWeight` to the URL query string
    if (getTotalPermittedWeight() != null) {
      joiner.add(String.format("%stotalPermittedWeight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTotalPermittedWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `totalTechnicallyPermittedWeight` to the URL query string
    if (getTotalTechnicallyPermittedWeight() != null) {
      joiner.add(String.format("%stotalTechnicallyPermittedWeight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTotalTechnicallyPermittedWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `axleWeight` to the URL query string
    if (getAxleWeight() != null) {
      joiner.add(String.format("%saxleWeight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAxleWeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numberOfAxles` to the URL query string
    if (getNumberOfAxles() != null) {
      joiner.add(String.format("%snumberOfAxles%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNumberOfAxles()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `numberOfTires` to the URL query string
    if (getNumberOfTires() != null) {
      joiner.add(String.format("%snumberOfTires%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNumberOfTires()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `height` to the URL query string
    if (getHeight() != null) {
      joiner.add(String.format("%sheight%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHeight()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `heightAboveFrontAxle` to the URL query string
    if (getHeightAboveFrontAxle() != null) {
      joiner.add(String.format("%sheightAboveFrontAxle%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHeightAboveFrontAxle()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `length` to the URL query string
    if (getLength() != null) {
      joiner.add(String.format("%slength%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getLength()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `width` to the URL query string
    if (getWidth() != null) {
      joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWidth()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hazardousMaterials` to the URL query string
    if (getHazardousMaterials() != null) {
      for (int i = 0; i < getHazardousMaterials().size(); i++) {
        if (getHazardousMaterials().get(i) != null) {
          joiner.add(String.format("%shazardousMaterials%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getHazardousMaterials().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `tunnelRestrictionCode` to the URL query string
    if (getTunnelRestrictionCode() != null) {
      joiner.add(String.format("%stunnelRestrictionCode%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getTunnelRestrictionCode()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `truckRoutes` to the URL query string
    if (getTruckRoutes() != null) {
      for (int i = 0; i < getTruckRoutes().size(); i++) {
        if (getTruckRoutes().get(i) != null) {
          joiner.add(String.format("%struckRoutes%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getTruckRoutes().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    // add `commercial` to the URL query string
    if (getCommercial() != null) {
      joiner.add(String.format("%scommercial%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCommercial()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `etcSubscriptions` to the URL query string
    if (getEtcSubscriptions() != null) {
      for (int i = 0; i < getEtcSubscriptions().size(); i++) {
        if (getEtcSubscriptions().get(i) != null) {
          joiner.add(String.format("%setcSubscriptions%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(ApiClient.valueToString(getEtcSubscriptions().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
        }
      }
    }

    return joiner.toString();
  }
}

