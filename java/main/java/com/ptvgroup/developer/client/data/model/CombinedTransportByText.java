/*
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.data.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.data.ApiClient;
/**
 * The parameters to search for in the combined transport data. This parameter is mutually exclusive with **position**.
 */
@JsonPropertyOrder({
  CombinedTransportByText.JSON_PROPERTY_QUERY,
  CombinedTransportByText.JSON_PROPERTY_ALLOWED_COUNTRIES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:41:14.325284564Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CombinedTransportByText {
  public static final String JSON_PROPERTY_QUERY = "query";
  private String query;

  public static final String JSON_PROPERTY_ALLOWED_COUNTRIES = "allowedCountries";
  private String allowedCountries;

  public CombinedTransportByText() { 
  }

  public CombinedTransportByText query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The text to match among the name, start or destination of the combined transport. The text matches the data if the data or a substring of it begins with the specified text after delimiters such  as spaces or hyphens. Before matching the strings, umlauts, accents and other character decorations are removed. The result is ordered such that case-insensitive exact matches including accents, umlauts and other  decorations will appear before other matches.
   * @return query
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuery(String query) {
    this.query = query;
  }


  public CombinedTransportByText allowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
    return this;
  }

  /**
   * Comma-separated list of countries the search is limited to. By default, all countries are allowed. If this parameter is present, only combined transports where either the start or the destination is located in one of the allowed countries are returned.  Countries are represented according to their [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) or [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) if referring to a subdivision.
   * @return allowedCountries
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALLOWED_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getAllowedCountries() {
    return allowedCountries;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_COUNTRIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAllowedCountries(String allowedCountries) {
    this.allowedCountries = allowedCountries;
  }


  /**
   * Return true if this CombinedTransportByText object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinedTransportByText combinedTransportByText = (CombinedTransportByText) o;
    return Objects.equals(this.query, combinedTransportByText.query) &&
        Objects.equals(this.allowedCountries, combinedTransportByText.allowedCountries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(query, allowedCountries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CombinedTransportByText {\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    allowedCountries: ").append(toIndentedString(allowedCountries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `query` to the URL query string
    if (getQuery() != null) {
      joiner.add(String.format("%squery%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getQuery()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `allowedCountries` to the URL query string
    if (getAllowedCountries() != null) {
      joiner.add(String.format("%sallowedCountries%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAllowedCountries()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

