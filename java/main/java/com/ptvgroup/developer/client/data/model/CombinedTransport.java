/*
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.data.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.data.model.CombinedTransportLocation;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.data.ApiClient;
/**
 * CombinedTransport
 */
@JsonPropertyOrder({
  CombinedTransport.JSON_PROPERTY_POLYLINE,
  CombinedTransport.JSON_PROPERTY_NAME,
  CombinedTransport.JSON_PROPERTY_DURATION,
  CombinedTransport.JSON_PROPERTY_TYPE,
  CombinedTransport.JSON_PROPERTY_START,
  CombinedTransport.JSON_PROPERTY_DESTINATION,
  CombinedTransport.JSON_PROPERTY_ALLOWED_FOR,
  CombinedTransport.JSON_PROPERTY_WAYPOINTS_PARAMETER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-27T08:41:14.325284564Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class CombinedTransport {
  public static final String JSON_PROPERTY_POLYLINE = "polyline";
  private String polyline;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DURATION = "duration";
  private Integer duration;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_START = "start";
  private CombinedTransportLocation start;

  public static final String JSON_PROPERTY_DESTINATION = "destination";
  private CombinedTransportLocation destination;

  public static final String JSON_PROPERTY_ALLOWED_FOR = "allowedFor";
  private String allowedFor;

  public static final String JSON_PROPERTY_WAYPOINTS_PARAMETER = "waypointsParameter";
  private String waypointsParameter;

  public CombinedTransport() { 
  }

  public CombinedTransport polyline(String polyline) {
    this.polyline = polyline;
    return this;
  }

  /**
   * The polyline of the combined transport in the format specified by **polylineFormat**.
   * @return polyline
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_POLYLINE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getPolyline() {
    return polyline;
  }


  @JsonProperty(JSON_PROPERTY_POLYLINE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPolyline(String polyline) {
    this.polyline = polyline;
  }


  public CombinedTransport name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the combined transport. **Note:** The names of the start location and the destination location do not have to match with the name of the combined transport. In such cases the combined transport name may refer to a roundtrip with one or more  intermediate stops. However, this combined transport represents only the part between the start location  and the destination location.
   * @return name
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public CombinedTransport duration(Integer duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The approximated duration of the combined transport [s].
   * @return duration
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDuration() {
    return duration;
  }


  @JsonProperty(JSON_PROPERTY_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDuration(Integer duration) {
    this.duration = duration;
  }


  public CombinedTransport type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the combined transport, i.e. how the vehicle is transported.  * &#x60;BOAT&#x60; - The combined transport is by boat, i.e. on a ferry.  * &#x60;RAIL&#x60; - The combined transport is by rail, i.e. on a train or rail shuttle.
   * @return type
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public CombinedTransport start(CombinedTransportLocation start) {
    this.start = start;
    return this;
  }

  /**
   * Get start
   * @return start
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public CombinedTransportLocation getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(CombinedTransportLocation start) {
    this.start = start;
  }


  public CombinedTransport destination(CombinedTransportLocation destination) {
    this.destination = destination;
    return this;
  }

  /**
   * Get destination
   * @return destination
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public CombinedTransportLocation getDestination() {
    return destination;
  }


  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDestination(CombinedTransportLocation destination) {
    this.destination = destination;
  }


  public CombinedTransport allowedFor(String allowedFor) {
    this.allowedFor = allowedFor;
    return this;
  }

  /**
   * Comma-separated list of vehicles that may use this combined transport.  Empty, if not allowed for any of these vehicle, e.g. if allowed only for pedestrians.  Values can be &#x60;CAR&#x60;,&#x60;VAN&#x60;,&#x60;TRUCK&#x60;.
   * @return allowedFor
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ALLOWED_FOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getAllowedFor() {
    return allowedFor;
  }


  @JsonProperty(JSON_PROPERTY_ALLOWED_FOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAllowedFor(String allowedFor) {
    this.allowedFor = allowedFor;
  }


  public CombinedTransport waypointsParameter(String waypointsParameter) {
    this.waypointsParameter = waypointsParameter;
    return this;
  }

  /**
   * The combined transport represented as a string that can be used as a **waypoints** parameter in the method **calculateRoute** of the Routing API.
   * @return waypointsParameter
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WAYPOINTS_PARAMETER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getWaypointsParameter() {
    return waypointsParameter;
  }


  @JsonProperty(JSON_PROPERTY_WAYPOINTS_PARAMETER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWaypointsParameter(String waypointsParameter) {
    this.waypointsParameter = waypointsParameter;
  }


  /**
   * Return true if this CombinedTransport object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CombinedTransport combinedTransport = (CombinedTransport) o;
    return Objects.equals(this.polyline, combinedTransport.polyline) &&
        Objects.equals(this.name, combinedTransport.name) &&
        Objects.equals(this.duration, combinedTransport.duration) &&
        Objects.equals(this.type, combinedTransport.type) &&
        Objects.equals(this.start, combinedTransport.start) &&
        Objects.equals(this.destination, combinedTransport.destination) &&
        Objects.equals(this.allowedFor, combinedTransport.allowedFor) &&
        Objects.equals(this.waypointsParameter, combinedTransport.waypointsParameter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(polyline, name, duration, type, start, destination, allowedFor, waypointsParameter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CombinedTransport {\n");
    sb.append("    polyline: ").append(toIndentedString(polyline)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    allowedFor: ").append(toIndentedString(allowedFor)).append("\n");
    sb.append("    waypointsParameter: ").append(toIndentedString(waypointsParameter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `polyline` to the URL query string
    if (getPolyline() != null) {
      joiner.add(String.format("%spolyline%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPolyline()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `name` to the URL query string
    if (getName() != null) {
      joiner.add(String.format("%sname%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getName()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `duration` to the URL query string
    if (getDuration() != null) {
      joiner.add(String.format("%sduration%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getDuration()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `type` to the URL query string
    if (getType() != null) {
      joiner.add(String.format("%stype%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getType()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `start` to the URL query string
    if (getStart() != null) {
      joiner.add(getStart().toUrlQueryString(prefix + "start" + suffix));
    }

    // add `destination` to the URL query string
    if (getDestination() != null) {
      joiner.add(getDestination().toUrlQueryString(prefix + "destination" + suffix));
    }

    // add `allowedFor` to the URL query string
    if (getAllowedFor() != null) {
      joiner.add(String.format("%sallowedFor%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAllowedFor()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `waypointsParameter` to the URL query string
    if (getWaypointsParameter() != null) {
      joiner.add(String.format("%swaypointsParameter%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWaypointsParameter()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

