/*
 * Data
 * With the Data service you can obtain additional data such as vehicle profiles.
 *
 * The version of the OpenAPI document: 1.17
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.data.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.data.model.TollFeatures;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.data.ApiClient;
/**
 * The features supported by this geographical unit. 
 */
@JsonPropertyOrder({
  MapFeatures.JSON_PROPERTY_TOLL,
  MapFeatures.JSON_PROPERTY_TOLL_FEATURES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-29T11:47:47.660663945Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class MapFeatures {
  public static final String JSON_PROPERTY_TOLL = "toll";
  private Boolean toll;

  public static final String JSON_PROPERTY_TOLL_FEATURES = "tollFeatures";
  private TollFeatures tollFeatures;

  public MapFeatures() { 
  }

  public MapFeatures toll(Boolean toll) {
    this.toll = toll;
    return this;
  }

  /**
   * If true, toll is supported in this geographical unit. False means that no toll data is available or toll does not apply in this geographical unit. Vignettes are not considered.
   * @return toll
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOLL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getToll() {
    return toll;
  }


  @JsonProperty(JSON_PROPERTY_TOLL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToll(Boolean toll) {
    this.toll = toll;
  }


  public MapFeatures tollFeatures(TollFeatures tollFeatures) {
    this.tollFeatures = tollFeatures;
    return this;
  }

  /**
   * Get tollFeatures
   * @return tollFeatures
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOLL_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TollFeatures getTollFeatures() {
    return tollFeatures;
  }


  @JsonProperty(JSON_PROPERTY_TOLL_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTollFeatures(TollFeatures tollFeatures) {
    this.tollFeatures = tollFeatures;
  }


  /**
   * Return true if this MapFeatures object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MapFeatures mapFeatures = (MapFeatures) o;
    return Objects.equals(this.toll, mapFeatures.toll) &&
        Objects.equals(this.tollFeatures, mapFeatures.tollFeatures);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toll, tollFeatures);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MapFeatures {\n");
    sb.append("    toll: ").append(toIndentedString(toll)).append("\n");
    sb.append("    tollFeatures: ").append(toIndentedString(tollFeatures)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `toll` to the URL query string
    if (getToll() != null) {
      joiner.add(String.format("%stoll%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getToll()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `tollFeatures` to the URL query string
    if (getTollFeatures() != null) {
      joiner.add(getTollFeatures().toUrlQueryString(prefix + "tollFeatures" + suffix));
    }

    return joiner.toString();
  }
}

